H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
p.value <- rep(NA, 87)
for (i in 1:87) {
p.value[i] <- mean(b10.matrix[i, ] > cs[i])
}
plot(p.value)
p.value
b10.matrix
cs
cs <- rep(NA, 87)
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
Y.fit0 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y.fit1 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
cs <- log(tmp1 / tmp0)
p.value <- rep(NA, 87)
for (i in 1:87) {
p.value[i] <- mean(b10.matrix[i, ] > cs[i])
}
cs
plot(p.value)
p.adjust(p.value)
X
p.adjust(p.value)
b10.matrix
b10.matrix[1, ]
hist(b10.matrix[1, ])
hist(b10.matrix[2, ])
hist(b10.matrix[3, ])
hist(b10.matrix[4, ])
hist(b10.matrix[5, ])
dim(b10.matrix)
cor(t(b10.matrix))
?p.value
?p.adjust
aa <- RMSE.ph1(chart1$model, log = log, sta = sta)
b10.matrix <- matrix(NA, nrow = 87, ncol = 1000)
b10.max <- rep(NA, 1000)
for (j in 1:1000) {
tmpsel <- sample(1:300, 1)
Y0fit <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, tmpsel], chart1$model$muq[tmpsel],
X = chart1$model$X, Beta = chart1$model$Beta[, tmpsel],
Kappa = chart1$model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
m <- length(Y0fit)
Y0.sim <- rnorm(m, Y0fit, sqrt(chart1$model$sigma2))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
tmpY.sim <- c(chart1$model$Y.tr[1:q], Y0.sim)
Y0.sim.fit0 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y0.sim, Y0.sim.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(Y0.sim, Y0.sim.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
b10 <- log(tmp1 / tmp0)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
b10.max
max(cs)
mean(b10.max > max(cs))
X
plot(cs)
quantile(b10.max, 0.9)
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(92)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 2
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE, adj.method = "none", nsim = 300, by = 5), silent = TRUE)
aa <- RMSE.ph1(chart1$model, log = log, sta = sta)
b10.matrix <- matrix(NA, nrow = 87, ncol = 1000)
b10.max <- rep(NA, 1000)
for (j in 1:1000) {
tmpsel <- sample(1:300, 1)
Y0fit <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, tmpsel], chart1$model$muq[tmpsel],
X = chart1$model$X, Beta = chart1$model$Beta[, tmpsel],
Kappa = chart1$model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
m <- length(Y0fit)
Y0.sim <- rnorm(m, Y0fit, sqrt(chart1$model$sigma2))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
tmpY.sim <- c(chart1$model$Y.tr[1:q], Y0.sim)
Y0.sim.fit0 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y0.sim, Y0.sim.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(Y0.sim, Y0.sim.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
b10 <- log(tmp1 / tmp0)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- rep(NA, 87)
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
Y.fit0 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y.fit1 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
cs <- log(tmp1 / tmp0)
p.value <- mean(b10.max > max(cs))
p.value
plot(cs)
chart1$model$Y.tr
length(chart1$model$Y.tr)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y0.sim, Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y0.sim, Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param sign.method is .
#' @param adj.method is
#' @param side is side
#'
#'
#' @export
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n - q, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(m, Y0fit, sqrt(model$sigma2[tmpsel]))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
cs
mean(b10.max > max(cs))
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF(chart1$model, 1000))
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(getlogBF)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
length(Y)
U
Y
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y0.sim
Y0fit
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n - q, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y0.sim
length(
Y0.sim
)
tmpY.sim
length(tmpY.sim)
dim(model)
Y0.sim.fit0
length(Y0.sim.fit0)
Y
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y
Y0.sim.fit0
length(Y0.sim.fit0)
length(Y)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
warnings
warnings()
debug(getlogBF)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
length(Y[-c(1:q)])
length(Y0.sim.fit0)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(Y) - q
tmp0 <- rep(0, n)
tmp1 <- rep(0, n)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
b10
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(Y) - q
tmp0 <- rep(0, n)
tmp1 <- rep(0, n)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param sign.method is .
#' @param adj.method is
#' @param side is side
#'
#'
#' @export
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
mean(b10.max > max(cs))
p.value
undebug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
list(p.value = p.value, cs = cs, sig = cs > quantile(b10.max, FAP0))
}
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
list(p.value = p.value, cs = cs, sig = cs > quantile(b10.max, 1 - FAP0))
}
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
lim <- quantile(b10.max, 1 - FAP0)
list(p.value = p.value, lim = lim, cs = cs, sig = cs > lim)
}
Ph1MultipleTesting.BF(chart1$model, 1000)
#undebug(Ph1MultipleTesting.BF)
qq <- Ph1MultipleTesting.BF(chart1$model, 1000)
qq
remove.packages("BayesianLASSOMonitoring")
