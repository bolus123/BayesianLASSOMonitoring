#'
#' TT <- 183
#' w <- 28
#' Y <- rzinpoisinar3(TT + w, alpha, lambda, pi, ceiling(TT / 2) + w, delta = 1, burnin = burnin)
#'
rzinpoisinar3 <- function(n, alpha, lambda, pi, h, delta, burnin = 100) {
q <- length(alpha)
out <- rep(NA, n + burnin + q)
out[1:q] <- VGAM::rzipois(q, lambda, pi)
k <- 0
lambda1 <- flambda1(delta, alpha, lambda, pi, pi1 = pi, interval = c(1e-10, 1000))
for (i in (q + 1):(n + burnin + q)) {
for (j in 1:q) {
out[i] <- rbinom(1, out[i - j], alpha[j])
}
if (i >= (q + 1 + burnin)) {
k <- k + 1
}
if (k >= h) {
out[i] <- out[i] + VGAM::rzipois(1, lambda1, pi)
} else {
out[i] <- out[i] + VGAM::rzipois(1, lambda, pi)
}
}
out[(burnin + q + 1):(n + burnin + q)]
}
invert.q <- function(coef) {
out <- 1
if (all(abs(coef) < 1)) {
minmod <- min(Mod(polyroot(c(1, coef))))
if (minmod <= 1) {
out <- 0
}
} else {
out <- 0
}
return(out)
}
pars.mat <- function(n, parsVec, norder = 1) {
Check <- invert.q(parsVec)
if (Check == 0) {
NULL
} else {
Mat <- diag(n)
for (i in 1:norder) {
Mat <- Mat + Diag(rep(parsVec[i], n - i), k = -i)
}
Mat
}
}
sigma.mat <- function(n, order = c(1, 0, 0), phi.vec = 0.5, theta.vec = NULL, sigma2 = 1, burn.in = 50) {
if (order[1] == 0) {
phiMat <- diag(n + burn.in)
} else {
phiMat <- pars.mat(n + burn.in, -phi.vec, norder = order[1])
}
if (order[3] == 0) {
thetaMat <- diag(n + burn.in)
} else {
thetaMat <- pars.mat(n + burn.in, theta.vec, norder = order[3])
}
out <- solve(phiMat) %*% thetaMat %*% t(thetaMat) %*% t(solve(phiMat)) * sigma2
gamma0 <- out[dim(out)[1], dim(out)[2]]
if (burn.in > 0) {
out <- out[-c(1:burn.in), -c(1:burn.in)]
}
list(sigma.mat = out, sqrtsigma.mat = sqrtm(out)$B, gamma0 = gamma0)
}
#' simulate realizations using ARMA(p, q) and one sustained shift
#'
#' @param n is the length
#' @param phi is the alpha
#' @param theta is the mean of poisson mixture
#' @param sigma2 is the mean of poisson mixture
#' @param h is the proportion of zeros
#' @param delta is the start point of shift
#' @param burnin is the length of the burn-in period
#' @param burnin is the length of the burn-in period
#' @export
#' @examples
#' nsim <- 100
#' burnin <- 100
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' alpha <- c(0.03083069, 0.06242601, 0.09120189)
#' lambda <- 0.239385
#' pi <- 0.1453097
#'
#' TT <- 183
#' w <- 28
#' Y <- rzinpoisinar3(TT + w, alpha, lambda, pi, ceiling(TT / 2) + w, delta = 1, burnin = burnin)
#'
rarma <- function(n, phi, theta, sigma2, h, delta, d = 0, Y0 = 0, intercept = 0, drift = 0, nsim = 100, burnin = 50, lowerbound = 0) {
ts <- arima.sim(list(ar = phi, ma = theta), n = n, sd = sqrt(sigma2))
ts <- ts + intercept + drift * (1:n)
gamma0 <- sigma.mat(nsim, order = c(length(phi), 0, length(theta)), phi.vec = phi, theta.vec = theta, sigma2 = sigma2, burn.in = burnin)$gamma0
ts[h:n] <- ts[h:n] + sqrt(gamma0) * delta
if (d > 0) {
m <- length(Y0)
tmp <- Y0[(m - d + 1):m]
for (j in 1:d) {
if (j == d) {
tmpdif <- tmp[d]
} else {
tmpdif <- diff(Y0, d - j)
}
ts <- c(tmpdif, ts)
for (i in 1:(n + j)) {
ts[i] <- ts[i] + ts[i - 1]
}
}
}
ts[which(ts < lowerbound)] <- lowerbound
nn <- length(ts)
ts[(nn - n + 1):ts]
}
rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
library(pracma)
rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
debug(rarma)
rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
rarma <- function(n, phi, theta, sigma2, h, delta, d = 0, Y0 = 0, intercept = 0, drift = 0, nsim = 100, burnin = 50, lowerbound = 0) {
ts <- arima.sim(list(ar = phi, ma = theta), n = n, sd = sqrt(sigma2))
ts <- ts + intercept + drift * (1:n)
gamma0 <- sigma.mat(nsim, order = c(length(phi), 0, length(theta)), phi.vec = phi, theta.vec = theta, sigma2 = sigma2, burn.in = burnin)$gamma0
ts[h:n] <- ts[h:n] + sqrt(gamma0) * delta
if (d > 0) {
m <- length(Y0)
tmp <- Y0[(m - d + 1):m]
for (j in 1:d) {
if (j == d) {
tmpdif <- tmp[d]
} else {
tmpdif <- diff(Y0, d - j)
}
ts <- c(tmpdif, ts)
for (i in 2:(n + j)) {
ts[i] <- ts[i] + ts[i - 1]
}
}
}
ts[which(ts < lowerbound)] <- lowerbound
nn <- length(ts)
ts[(nn - n + 1):ts]
}
debug(rarma)
rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
ts
plot(ts)
drift
?Arima
undebug(rarma)
aa <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
plot(aa)
aa
aa <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
debug(rarma)
aa <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
debug(rarma)
aa <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
phi
aa <- forecast::auto.arima(walker_BUPRENORPHINE$mme_percapita, ic = "bic", max.P = 35, max.Q = 35)
undebug(rarma)
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
debug(rarma)
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
ts
ts
ts
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
nn
(nn - n + 1)
rarma <- function(n, phi, theta, sigma2, h, delta, d = 0, Y0 = 0, intercept = 0, drift = 0, nsim = 100, burnin = 50, lowerbound = 0) {
ts <- arima.sim(list(ar = phi, ma = theta), n = n, sd = sqrt(sigma2))
ts <- ts + intercept + drift * (1:n)
gamma0 <- sigma.mat(nsim, order = c(length(phi), 0, length(theta)), phi.vec = phi, theta.vec = theta, sigma2 = sigma2, burn.in = burnin)$gamma0
ts[h:n] <- ts[h:n] + sqrt(gamma0) * delta
if (d > 0) {
m <- length(Y0)
tmp <- Y0[(m - d + 1):m]
for (j in 1:d) {
if (j == d) {
tmpdif <- tmp[d]
} else {
tmpdif <- diff(Y0, d - j)
}
ts <- c(tmpdif, ts)
for (i in 2:(n + j)) {
ts[i] <- ts[i] + ts[i - 1]
}
}
}
ts[which(ts < lowerbound)] <- lowerbound
nn <- length(ts)
ts[(nn - n + 1):nn]
}
rarma <- function(n, phi, theta, sigma2, h, delta, d = 0, Y0 = 0, intercept = 0, drift = 0, nsim = 100, burnin = 50, lowerbound = 0) {
ts <- arima.sim(list(ar = phi, ma = theta), n = n, sd = sqrt(sigma2))
ts <- ts + intercept + drift * (1:n)
gamma0 <- sigma.mat(nsim, order = c(length(phi), 0, length(theta)), phi.vec = phi, theta.vec = theta, sigma2 = sigma2, burn.in = burnin)$gamma0
ts[h:n] <- ts[h:n] + sqrt(gamma0) * delta
if (d > 0) {
m <- length(Y0)
tmp <- Y0[(m - d + 1):m]
for (j in 1:d) {
if (j == d) {
tmpdif <- tmp[d]
} else {
tmpdif <- diff(Y0, d - j)
}
ts <- c(tmpdif, ts)
for (i in 2:(n + j)) {
ts[i] <- ts[i] + ts[i - 1]
}
}
}
ts[which(ts < lowerbound)] <- lowerbound
nn <- length(ts)
c(Y0, ts[(nn - n + 1):nn])
}
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
aa1
plot(aa1)
aa1 <- rarma(728, aa$coef[1:2], aa$coef[3], sigma2 = aa$sigma2, h = 50, delta = 0, d = 1, Y0 = walker_BUPRENORPHINE$mme_percapita[1],
drift = aa$coef[4])
aa
simulate(aa)
?simulate
library(forecast)
?simulate
simulate.Arima
forecast
?
forecast
simulate(aa, nsim = 1000, future = FALSE)
plot(simulate(aa, nsim = 1000, future = FALSE))
aa$model$Delta
aa$fitted
pred(aa)
predict(aa)
rarma <- function(object, n, h, delta, nsim = 100, burnin = 50, lowerbound = 0) {
mu <- rep(delta, n)
mu[1:(h - 1)] <- 0
innov <- rnorm(n, mu, sqrt(object$sigma2))
ts <- simulate(object, nsim = n, future = FALSE, innov = innov)
ts
}
rarma
aa1 <- rarma(aa, 1000, h = 50, delta = 0, d = 1)
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
aa1
aa1 <- rarma(aa, 1000, h = 50, delta = 10)
aa1
plot(aa1)
aa1 <- rarma(aa, 1000, h = 50, delta = 3)
aa1
plot(aa1)
#' @keywords package
#' @aliases BayesianLASSOMonitoring-package
"_PACKAGE"
#' Package BayesianLASSOMonitoring
#'
#' Package description.
#'
#' @name BayesianLASSOMonitoring-package
#' @references McCulloch, R. E., & Tsay, R. S. (1993). Bayesian inference and prediction for mean and variance shifts in autoregressive time series. Journal of the american Statistical association, 88(423), 968-978.
#' @import Rcpp VGAM ZINARp forecast
#' @importFrom stats dnorm
#' @importFrom stats rnorm
#' @importFrom stats arima
#' @importFrom stats median
#' @importFrom stats quantile
#' @importFrom stats sd
#' @importFrom Rcpp evalCpp
#' @useDynLib BayesianLASSOMonitoring, .registration = TRUE
NULL
aa1 <- rarma(aa, 1000, h = 50, delta = 3)
aa1
aa$coef
aa$coef
names(aa$coef)
grep("ar", names(aa$coef))
length(grep("ar", names(aa$coef)))
grep("aa", names(aa$coef))
rarma <- function(object, n, h, delta, nsim = 100, burnin = 50, lowerbound = 0) {
nphi <- grep("ar", names(aa$coef))
ntheta <- grep("ma", names(aa$coef))
if (length(nphi) == 0) {
phi <- NULL
} else {
phi <- object$coef[nphi]
}
if (length(ntheta) == 0) {
theta <- NULL
} else {
theta <- object$coef[ntheta]
}
gamma0 <- sigma.mat(n, order = c(length(nphi), 0, length(ntheta)),
phi.vec = phi, theta.vec = theta, sigma2 = object$sigma2, burn.in = 50)$gamma0
mu <- rep(sqrt(gamma0) * delta, n)
mu[1:(h - 1)] <- 0
innov <- rnorm(n, mu, sqrt(object$sigma2))
ts <- simulate(object, nsim = n, future = FALSE, innov = innov)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
debug(rarma)
aa1 <- rarma(aa, 1000, h = 50, delta = 3)
nphi
ntheta
Q
rarma <- function(object, n, h, delta, nsim = 100, burnin = 50, lowerbound = 0) {
nphi <- grep("ar", names(aa$coef))
ntheta <- grep("ma", names(aa$coef))
if (length(nphi) == 0) {
phi <- NULL
} else {
phi <- object$coef[nphi]
}
if (length(ntheta) == 0) {
theta <- NULL
} else {
theta <- object$coef[ntheta]
}
gamma0 <- sigma.mat(n = nsim, order = c(length(nphi), 0, length(ntheta)),
phi.vec = phi, theta.vec = theta, sigma2 = object$sigma2, burn.in = burnin)$gamma0
mu <- rep(sqrt(gamma0) * delta, n)
mu[1:(h - 1)] <- 0
innov <- rnorm(n, mu, sqrt(object$sigma2))
ts <- simulate(object, nsim = n, future = FALSE, innov = innov)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
debug(rarma)
aa1 <- rarma(aa, 1000, h = 50, delta = 3)
gamma0
ts
ts
aa1 <- rarma(aa, 1000, h = 50, delta = 1)
undebug(rarma)
aa1 <- rarma(aa, 1000, h = 50, delta = 1)
aa1
plot(aa1)
aa1 <- rarma(aa, 1000, h = 50, delta = 0.5)
aa1
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
aa1
plot(aa1)
debug(rarma)
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
debug(rarma)
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
plot(aa1)
walker_METHADONE <- dat_mme_percapita[datesel, ]
walker_METHADONE <- walker_METHADONE[which((walker_METHADONE$county == "WALKER") & (walker_METHADONE$drug == "METHADONE")), ]
aa2 <- forecast::auto.arima(walker_METHADONE$mme_percapita, ic = "bic", max.P = 35, max.Q = 35, trace = TRUE)
aa2
aa2$coef
source("~/.active-rstudio-document", echo=TRUE)
rarma <- function(object, n, h, delta, nsim = 100, burnin = 50, lowerbound = 0) {
nphi <- grep("ar", names(object$coef))
ntheta <- grep("ma", names(object$coef))
if (length(nphi) == 0) {
phi <- NULL
} else {
phi <- object$coef[nphi]
}
if (length(ntheta) == 0) {
theta <- NULL
} else {
theta <- object$coef[ntheta]
}
gamma0 <- sigma.mat(n = nsim, order = c(length(nphi), 0, length(ntheta)),
phi.vec = phi, theta.vec = theta, sigma2 = object$sigma2, burn.in = burnin)$gamma0
tmpint <- grep("intercept", names(object$coef))
mu <- rep(ifelse(length(tmpint) == 0, 0, object$coef[tmpint]), n)
mu[h:n] <- mu[h:n] + sqrt(gamma0) * delta
innov <- rnorm(n, mu, sqrt(object$sigma2))
ts <- simulate(object, nsim = n, future = FALSE, innov = innov)
ts[which(ts < lowerbound)] <- lowerbound
ts
}
aa3 <- rarma(aa2, 1000, h = 50, delta = 3)
aa43
aa3
aa3 <- rarma(aa2, 1000, h = 50, delta = 1)
plot(aa3)
aa2$sigma2
aa2
aa
aa1 <- rarma(aa, 1000, h = 50, delta = 0)
plot(aa1)
aa
plot(walker_BUPRENORPHINE$mme_percapita)
cc <- BayesianLASSOMonitoring::movaver(walker_BUPRENORPHINE$mme_percapita, 7)
cc
plot(cc)
cc1 <- forecast::auto.arima(cc, ic = "bic", max.P = 35, max.Q = 35)
cc1
acf(residuals(cc1))
pacf(residuals(cc1))
acf(residuals(cc1))
?acf
acf(residuals(cc1), lag.max = 190)
acf(residuals(cc1), lag.max = 365.25)
walker_METHADONE <- dat_mme_percapita[datesel, ]
walker_METHADONE <- walker_METHADONE[which((walker_METHADONE$county == "WALKER") & (walker_METHADONE$drug == "METHADONE")), ]
aa2 <- forecast::auto.arima(walker_METHADONE$mme_percapita, ic = "bic", max.P = 35, max.Q = 35, trace = TRUE)
cc2 <- BayesianLASSOMonitoring::movaver(walker_METHADONE$mme_percapita, 7)
cc3 <- forecast::auto.arima(cc2, ic = "bic", max.P = 35, max.Q = 35)
cc2
plot(cc2)
plot(cc3)
plot(residuals(cc3))
acf(residuals(cc3))
acf(residuals(cc3), lag.max = 365.25)
acf(residuals(cc3), lag.max = 3656)
acf(residuals(cc3), lag.max = 366)
walker_BUPRENORPHINE_model <- forecast::auto.arima(walker_BUPRENORPHINE$mme_percapita, ic = "bic", max.P = 35, max.Q = 35)
walker_BUPRENORPHINE_model
save(walker_BUPRENORPHINE_model, file = 'C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_BUPRENORPHINE_model.Rdat')
walker_METHADONE_model <- forecast::auto.arima(walker_METHADONE$mme_percapita, ic = "bic", max.P = 35, max.Q = 35, trace = TRUE)
save(walker_METHADONE_model, file = 'C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/dataset/walker_METHADONE_model.Rdat')
aa1 <- rarma(aa, 183, h = 50, delta = 0)
aa1
cc <- BayesianLASSOMonitoring::movaver(aa1, 7)
cc
aa1 <- rarma(aa, 183 + 6, h = 50, delta = 0)
cc <- BayesianLASSOMonitoring::movaver(aa1, 7)
cc
cc <- BayesianLASSOMonitoring::movaver(aa1, 7)[-c(1:6)]
cc
?BayesianLASSOMonitoring::Ph1BayesianLASSO
H <- BayesianLASSOMonitoring::getHMatMT(183, 5)
X <- matrix(1:183, ncol = 1)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(cc, 7, H, X)
ee$model$Phi
hist(ee$model$Phi[1, ])
hist(ee$model$Phi[2, ])
hist(ee$model$Phi[3, ])
hist(ee$model$Phi[4, ])
hist(ee$model$Phi[5, ])
aa1 <- rarma(aa, 183 + 6, h = 6 + ceiling(183 / 2), delta = 0.5)
cc <- BayesianLASSOMonitoring::movaver(aa1, 7)[-c(1:6)]
H <- BayesianLASSOMonitoring::getHMatMT(183, 5)
X <- matrix(1:183, ncol = 1)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(cc, 7, H, X)
?BayesianLASSOMonitoring::Ph1BayesianLASSO
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(cc, 7, H, X, log = FALSE, sta = FALSE)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(cc, 7, H, X, log = FALSE, sta = FALSE, side = "right-sided", FAP0 = 0.2)
aa1 <- rarma(aa, 183 + 6, h = 6 + ceiling(183 / 2), delta = 1)
cc <- BayesianLASSOMonitoring::movaver(aa1, 7)[-c(1:6)]
H <- BayesianLASSOMonitoring::getHMatMT(183, 5)
X <- matrix(1:183, ncol = 1)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(cc, 7, H, X, log = FALSE, sta = FALSE, side = "right-sided", FAP0 = 0.2)
ee$model$Beta
ee$model$Beta * ee$model$Kappa
hist(ee$model$Beta * ee$model$Kappa)
mean(ee$model$Beta * ee$model$Kappa)
dd <- diff(cc, differences = 1)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(dd, 7, H, X, log = FALSE, sta = FALSE, side = "right-sided", FAP0 = 0.2)
H <- BayesianLASSOMonitoring::getHMatMT(182, 5)
X <- matrix(1:182, ncol = 1)
dd <- diff(cc, differences = 1)
ee <- BayesianLASSOMonitoring::Ph1BayesianLASSO(dd, 7, H, X, log = FALSE, sta = FALSE, side = "right-sided", FAP0 = 0.2)
mean(ee$model$Beta * ee$model$Kappa)
ee$model$Phi
hist(ee$model$Phi[1, ])
hist(ee$model$Phi[2, ])
hist(ee$model$Phi[3, ])
hist(ee$model$Phi[4, ])
hist(ee$model$Phi[5, ])
BayesianLASSOMonitoring::RMSE.ph1(ee)
?BayesianLASSOMonitoring::RMSE.ph1
BayesianLASSOMonitoring::RMSE.ph1(ee, log = FALSE, sta = FALSE)
BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE)
debug(BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE))
debug(BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE))\
BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE)
debug(BayesianLASSOMonitoring::RMSE.ph1)
BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE)
X
H
BayesianLASSOMonitoring::RMSE.ph1(ee$model, log = FALSE, sta = FALSE)
Ph1BayesianLASSO.model$Beta
Ph1BayesianLASSO.model$Kappa
as.matrix(ee$model$Beta)
as.matrix(ee$model$Kappa)
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
