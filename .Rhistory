p.value.resi <- p.value.left
} else {
p.value.resi <- p.value.two
}
sig.resi <- p.value.resi <= FAP0
list(sig.resi = sig.resi,
p.value.resi = p.value.resi,
p.value.right = p.value.right,
p.value.left = p.value.left,
p.value.two = p.value.two)
}
debug(Ph1MultipleTesting.Y0)
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
Ph1MultipleTesting.Y0 <- function(model, nsim = 1000, FAP0 = 0.2, log = FALSE, const = 1, sta = FALSE, lowerbound = 0, side = "right-sided") {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
tmpY.sim <- matrix(NA, nrow = n, ncol = nsim)
tmpY.resi <- matrix(NA, nrow = n, ncol = nsim)
Y.resi <- rep(NA, n)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
Y0.sim <- backtrans(Y0.sim, log, const, sta, model$meanY, model$sdY)
Y0.sim[Y0.sim < lowerbound] <- lowerbound
tmpY.sim[, j] <- Y0.sim
}
tmpY.sim.median <- rep(NA, n)
for (i in 1:n) {
tmpY.sim.median[i] <- median(tmpY.sim[i, ], na.rm = TRUE)
tmpY.resi[i, ] <- tmpY.sim[i, ] - tmpY.sim.median[i]
Y.resi[i] <- model$Y.ma[i + q] - tmpY.sim.median[i]
}
tmpY.resi.max <- rep(NA, nsim)
tmpY.resi.min <- rep(NA, nsim)
for (j in 1:nsim) {
tmpY.resi.max[j] <- max(tmpY.resi[, j], na.rm = TRUE)
tmpY.resi.min[j] <- min(tmpY.resi[, j], na.rm = TRUE)
}
p.value.right <- mean(tmpY.resi.max >= max(Y.resi), na.rm = TRUE)
p.value.left <- mean(tmpY.resi.min <= min(Y.resi), na.rm = TRUE)
p.value.two <- mean((tmpY.resi.min <= min(Y.resi)) | (max(Y.resi) <= tmpY.resi.max), na.rm = TRUE)
if (side == "right-sided") {
p.value.resi <- p.value.right
} else if (side == "left-sided") {
p.value.resi <- p.value.left
} else {
p.value.resi <- p.value.two
}
sig.resi <- p.value.resi <= FAP0
list(sig.resi = sig.resi,
p.value.resi = p.value.resi,
p.value.right = p.value.right,
p.value.left = p.value.left,
p.value.two = p.value.two)
}
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
chart11$sig.resi
chart11$p.value.resi
Ph1MultipleTesting.Y0 <- function(model, nsim = 1000, FAP0 = 0.2, log = FALSE, const = 1, sta = FALSE, lowerbound = 0, side = "right-sided") {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
tmpY.sim <- matrix(NA, nrow = n, ncol = nsim)
tmpY.resi <- matrix(NA, nrow = n, ncol = nsim)
Y.resi <- rep(NA, n)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
Y0.sim <- backtrans(Y0.sim, log, const, sta, model$meanY, model$sdY)
Y0.sim[Y0.sim < lowerbound] <- lowerbound
tmpY.sim[, j] <- Y0.sim
}
tmpY.sim.median <- rep(NA, n)
for (i in 1:n) {
tmpY.sim.median[i] <- median(tmpY.sim[i, ], na.rm = TRUE)
tmpY.resi[i, ] <- tmpY.sim[i, ] - tmpY.sim.median[i]
Y.resi[i] <- model$Y.ma[i + q] - tmpY.sim.median[i]
}
tmpY.resi.max <- rep(NA, nsim)
tmpY.resi.min <- rep(NA, nsim)
for (j in 1:nsim) {
tmpY.resi.max[j] <- max(tmpY.resi[, j], na.rm = TRUE)
tmpY.resi.min[j] <- min(tmpY.resi[, j], na.rm = TRUE)
}
p.value.right <- mean(tmpY.resi.max >= max(Y.resi), na.rm = TRUE)
p.value.left <- mean(tmpY.resi.min <= min(Y.resi), na.rm = TRUE)
p.value.two <- mean((tmpY.resi.min <= min(Y.resi)) | (max(Y.resi) <= tmpY.resi.max), na.rm = TRUE)
lower <- NA
upper <- NA
if (side == "right-sided") {
p.value <- p.value.right
lower <- NA
upper <- quantile(tmpY.resi.max, 1 - FAP0)
} else if (side == "left-sided") {
p.value <- p.value.left
lower <- quantile(tmpY.resi.min, 1 - FAP0)
upper <- NA
} else {
p.value <- p.value.two
lower <- quantile(tmpY.resi.min, 1 - FAP0 / 2)
upper <- quantile(tmpY.resi.max, 1 - FAP0 / 2)
}
sig <- p.value <= FAP0
if (side == "right-sided")
list(sig = sig,
p.value = p.value,
cs = Y.resi,
lower = lower,
upper = upper,
Y0.median = tmpY.sim.median,
p.value.right = p.value.right,
p.value.left = p.value.left,
p.value.two = p.value.two)
}
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
chart11$upper
debug(Ph1MultipleTesting.Y0)
chart11$upper
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
tmpY.resi.max
quantile(tmpY.resi.max, 0.8)
quantile(tmpY.resi.max, 0.2)
quantile(tmpY.resi.min, 0.8)
quantile(tmpY.resi.min, 0.2)
Ph1MultipleTesting.Y0 <- function(model, nsim = 1000, FAP0 = 0.2, log = FALSE, const = 1, sta = FALSE, lowerbound = 0, side = "right-sided") {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
tmpY.sim <- matrix(NA, nrow = n, ncol = nsim)
tmpY.resi <- matrix(NA, nrow = n, ncol = nsim)
Y.resi <- rep(NA, n)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
Y0.sim <- backtrans(Y0.sim, log, const, sta, model$meanY, model$sdY)
Y0.sim[Y0.sim < lowerbound] <- lowerbound
tmpY.sim[, j] <- Y0.sim
}
tmpY.sim.median <- rep(NA, n)
for (i in 1:n) {
tmpY.sim.median[i] <- median(tmpY.sim[i, ], na.rm = TRUE)
tmpY.resi[i, ] <- tmpY.sim[i, ] - tmpY.sim.median[i]
Y.resi[i] <- model$Y.ma[i + q] - tmpY.sim.median[i]
}
tmpY.resi.max <- rep(NA, nsim)
tmpY.resi.min <- rep(NA, nsim)
for (j in 1:nsim) {
tmpY.resi.max[j] <- max(tmpY.resi[, j], na.rm = TRUE)
tmpY.resi.min[j] <- min(tmpY.resi[, j], na.rm = TRUE)
}
p.value.right <- mean(tmpY.resi.max >= max(Y.resi), na.rm = TRUE)
p.value.left <- mean(tmpY.resi.min <= min(Y.resi), na.rm = TRUE)
p.value.two <- mean((tmpY.resi.min <= min(Y.resi)) | (max(Y.resi) <= tmpY.resi.max), na.rm = TRUE)
lower <- NA
upper <- NA
if (side == "right-sided") {
p.value <- p.value.right
lower <- NA
upper <- quantile(tmpY.resi.max, 1 - FAP0)
} else if (side == "left-sided") {
p.value <- p.value.left
lower <- quantile(tmpY.resi.min, FAP0)
upper <- NA
} else {
p.value <- p.value.two
lower <- quantile(tmpY.resi.min, FAP0 / 2)
upper <- quantile(tmpY.resi.max, 1 - FAP0 / 2)
}
sig <- p.value <= FAP0
if (side == "right-sided")
list(sig = sig,
p.value = p.value,
cs = Y.resi,
lower = lower,
upper = upper,
Y0.median = tmpY.sim.median,
p.value.right = p.value.right,
p.value.left = p.value.left,
p.value.two = p.value.two)
}
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
chart11
debug(Ph1MultipleTesting.Y0)
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
hist(tmpY.resi.min)
hist(tmpY.resi.max)
abline(v = quantile(tmpY.resi.max, 0.8))
hist(tmpY.resi.min)
abline(v = quantile(tmpY.resi.min, 0.2))
Ph1MultipleTesting.Y0 <- function(model, nsim = 1000, FAP0 = 0.2, log = FALSE, const = 1, sta = FALSE, lowerbound = 0, side = "right-sided") {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
tmpY.sim <- matrix(NA, nrow = n, ncol = nsim)
tmpY.resi <- matrix(NA, nrow = n, ncol = nsim)
Y.resi <- rep(NA, n)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
Y0.sim <- backtrans(Y0.sim, log, const, sta, model$meanY, model$sdY)
Y0.sim[Y0.sim < lowerbound] <- lowerbound
tmpY.sim[, j] <- Y0.sim
}
tmpY.sim.median <- rep(NA, n)
for (i in 1:n) {
tmpY.sim.median[i] <- median(tmpY.sim[i, ], na.rm = TRUE)
tmpY.resi[i, ] <- tmpY.sim[i, ] - tmpY.sim.median[i]
Y.resi[i] <- model$Y.ma[i + q] - tmpY.sim.median[i]
}
tmpY.resi.max <- rep(NA, nsim)
tmpY.resi.min <- rep(NA, nsim)
for (j in 1:nsim) {
tmpY.resi.max[j] <- max(tmpY.resi[, j], na.rm = TRUE)
tmpY.resi.min[j] <- min(tmpY.resi[, j], na.rm = TRUE)
}
p.value.right <- mean(tmpY.resi.max >= max(Y.resi), na.rm = TRUE)
p.value.left <- mean(tmpY.resi.min <= min(Y.resi), na.rm = TRUE)
p.value.two <- mean((tmpY.resi.min <= min(Y.resi)) | (max(Y.resi) <= tmpY.resi.max), na.rm = TRUE)
lower <- NA
upper <- NA
if (side == "right-sided") {
p.value <- p.value.right
lower <- NA
upper <- quantile(tmpY.resi.max, 1 - FAP0)
sig.ind <- Y.resi >= upper
} else if (side == "left-sided") {
p.value <- p.value.left
lower <- quantile(tmpY.resi.min, FAP0)
upper <- NA
sig.ind <- Y.resi <= lower
} else {
p.value <- p.value.two
lower <- quantile(tmpY.resi.min, FAP0 / 2)
upper <- quantile(tmpY.resi.max, 1 - FAP0 / 2)
sig.ind <- (Y.resi <= lower) | (Y.resi >= upper)
}
sig <- p.value <= FAP0
sig.ind <-
if (side == "right-sided")
list(sig = sig,
p.value = p.value,
sig.ind = sig.ind,
cs = Y.resi,
lower = lower,
upper = upper,
Y0.median = tmpY.sim.median,
p.value.right = p.value.right,
p.value.left = p.value.left,
p.value.two = p.value.two)
}
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
chart11 <- Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
chart11
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig.ind[start.exact:end], na.rm =TRUE)ÃŸ
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig.ind[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig.ind[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- chart11$sig
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, X2, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
}
out
out <- NA
out1 <- getChart(Y1, w, H1, Y0, "MT",
side, FAP0,
log, sta, Y2, H2, tt, TT1, X1, X2)
getChart <- function(Y1, w, H1, Y0, method,
side, FAP0,
log, sta, Y2, H2, tt, TT1, X1, X2) {
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, X1, Y0 = Y0, method = method,
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE,
sign.method = "DM", adj.method = "none",
nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig.ind[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig.ind[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- chart11$sig
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, X2, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
}
return(out)
}
out1 <- getChart(Y1, w, H1, Y0, "MT",
side, FAP0,
log, sta, Y2, H2, tt, TT1, X1, X2)
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
getChart <- function(Y1, w, H1, Y0, method,
side, FAP0,
log, sta, Y2, H2, tt, TT1) {
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = method,
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE,
sign.method = "DM", adj.method = "none",
nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig.ind[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig.ind[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- chart11$sig
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, X2, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
}
return(out)
}
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 100
TT1 <- c(92, 183)
#TT1 <- c(92)
TT2 <- 365
w <- c(1, 3, 7, 14, 28)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
out <- rep(NA, 18 * 6)
out1 <- getChart(Y1, w, H1, Y0, "MT",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
getChart <- function(Y1, w, H1, Y0, method,
side, FAP0,
log, sta, Y2, H2, tt, TT1) {
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = method,
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE,
sign.method = "DM", adj.method = "none",
nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.Y0(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, lowerbound = 0, side = side)
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig.ind[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig.ind[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig.ind[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- chart11$sig
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, NULL, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
}
return(out)
}
out1 <- getChart(Y1, w, H1, Y0, "MT",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out1
out <- rep(NA, 6 * 6)
out1 <- getChart(Y1, w, H1, Y0, "MT",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out2 <- getChart(Y1, w, H1, Y0, "regression",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out3 <- getChart(Y1, w, H1, Y0, "LASSO",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out4 <- getChart(Y1, w, H1, Y0, "ALASSO",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out5 <- getChart(Y1, w, H1, Y0, "MonoLASSO",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out6 <- getChart(Y1, w, H1, Y0, "MonoALASSO",
side, FAP0,
log, sta, Y2, H2, tt, TT1)
out <- c(out1, out2, out3, out4, out5, out6)
out
load(file = "C:/Users/yyao17/Box/2024 Spring/Temporal and Geographical Project for Opioid-overdose ER vistis/dataset/walker_OXYCODONE_model2.Rdat")
