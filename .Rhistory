}
list("Y0.ma" = Y0.ma, "lower" = lower, "upper" = upper)
}
debug(Ph1MultipleTesting.resi)
qq <- Ph1MultipleTesting.resi(chart1$model)
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) > 0)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
list("Y0.ma" = Y0.ma, "lower" = lower, "upper" = upper)
}
debug(Ph1MultipleTesting.resi)
qq <- Ph1MultipleTesting.resi(chart1$model)
debug(Ph1MultipleTesting.resi)
qq <- Ph1MultipleTesting.resi(chart1$model)
debug(root.finding)
sig
1 - adj.alpha
quantile(sim0[i, ], 1 - adj.alpha)
tmplower
(tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
sig
sig[, 1]
sig[, 1]
sig[, 2]
colSums(sig)
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) == m)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
list("Y0.ma" = Y0.ma, "lower" = lower, "upper" = upper)
}
qq <- Ph1MultipleTesting.resi(chart1$model)
qq
qq$Y0.ma
qq$upper
plot(qq$upper)
plot(qq$upper, type = 'l')
points(chart1$model$Y.ma[-c(1:5)])
chart1$model$Y.ma
length(chart1$model$Y.ma)
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) == m)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
cs <- model$Y.ma
sig <- 1 - (lower <= (model$Y.ma) & (model$Y.ma <= upper))
list("cs" = cs, "sig" = sig, "lower" = lower, "upper" = upper)
}
qq <- Ph1MultipleTesting.resi(chart1$model)
qq$sig
qq$cs
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) == m)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
cs <- model$Y.ma[-c(1:q)]
sig <- 1 - ((lower <= cs) & (cs <= upper))
list("cs" = cs, "sig" = sig, "lower" = lower, "upper" = upper)
}
qq <- Ph1MultipleTesting.resi(chart1$model)
qq$cs
qq$sig
X
qq$lower
qq$upper
X
qq <- Ph1MultipleTesting.resi(chart1$model)
qq$cs
qq$sig
plot(qq$cs)
plot(qq$cs, type = 'l')
plot(qq$upper, type = 'l', col = 'red')
plot(qq$cs, type = 'l')
points(qq$upper, type = 'l', col = 'red')
qq <- Ph1MultipleTesting.resi(chart1$model, side = 'two-sided')
plot(qq$cs, type = 'l')
points(qq$lower, type = 'l', col = 'red')
points(qq$upper, type = 'l', col = 'red')
qq$lower
qq
qq$sig
qq$sig
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) == m)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
cs <- model$Y.ma[-c(1:q)]
sig <- 1 - ((lower <= cs) & (cs <= upper))
list("cs" = cs, "sig" = sig, "lower" = lower, "upper" = upper,
"adj.alpha" = adj.alpha, "Y0.ma" = Y0.ma)
}
qq <- Ph1MultipleTesting.resi(chart1$model, side = 'two-sided')
qq$Y0.ma
qq$cs
qq$upper
qq$upper
qq$upper
Ph1MultipleTesting.resi
qq$sig
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.resi(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, side = side)
chart11<-Ph1MultipleTesting.resi(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta, side = side)
Ph1MultipleTesting.resi <- function(model, interval = c(1e-8, 0.5 - 1e-8), log = FALSE, const = 1, sta = FALSE,
meanY = NULL, sdY = NULL,
nsim = 10000, FAP0 = 0.2, side = "right-sided", tol = 1e-8) {
root.finding <- function(adj.alpha, sim0, FAP0 = 0.2, side = "right-sided") {
m <- dim(sim0)[1]
nsim <- dim(sim0)[2]
tmplower <- rep(-Inf, m)
tmpupper <- rep(Inf, m)
sig <- matrix(NA, nrow = m, ncol = nsim)
for (i in 1:m) {
if (side == "right-sided") {
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha)
} else if (side == "two-sided") {
tmplower[i] <- quantile(sim0[i, ], adj.alpha/2)
tmpupper[i] <- quantile(sim0[i, ], 1 - adj.alpha/2)
}
}
for (j in 1:nsim) {
sig[, j] <- (tmplower <= sim0[, j]) & (sim0[, j] <= tmpupper)
}
tmp <- 1 - mean(colSums(sig) == m)
cat("tmp:", tmp, "and adj.alpha:", adj.alpha, "\n")
tmp - FAP0
}
nnsim <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(model$Y.tr)
resi0 <- matrix(NA, n - q, nsim)
resi1 <- matrix(NA, n - q, nsim)
Y0.ma <- matrix(NA, n - q, nsim)
max.resi0 <- rep(NA, nsim)
max.resi1 <- rep(NA, nsim)
for (i in 1:nsim) {
tmpsel <- sample(1:nnsim, 1)
tmpfit <- fit.GibbsRFLSM(model$Y.tr, Phi = model$Phi[, tmpsel], muq = model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel], Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
tmpresi0 <- model$Y.tr[-c(1:q)] - tmpfit
tmpsigma2 <- mean(tmpresi0 ^ 2)
tmpY0.ma <- rnorm(n - q, tmpfit, sqrt(tmpsigma2))
tmpY0.ma <- backtrans(tmpY0.ma, log, const, sta, model$meanY, model$sdY)
tmpY0.ma[tmpY0.ma < 0] <- 0
Y0.ma[, i] <- tmpY0.ma
}
adj.alpha <- uniroot(root.finding, interval = interval,
sim0 = Y0.ma, FAP0 = FAP0, side = side, tol = tol)$root
lower <- rep(-Inf, n - q)
upper <- rep(Inf, n - q)
for (i in 1:(n - q)) {
if (side == "right-sided") {
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha)
} else if (side == "left-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha)
} else if (side == "two-sided") {
lower[i] <- quantile(Y0.ma[i, ], adj.alpha/2)
upper[i] <- quantile(Y0.ma[i, ], 1 - adj.alpha/2)
}
}
cs <- model$Y.ma[-c(1:q)]
sig <- 1 - ((lower <= cs) & (cs <= upper))
list("cs" = cs, "sig" = sig, "lower" = lower, "upper" = upper,
"adj.alpha" = adj.alpha, "Y0.ma" = Y0.ma)
}
chart11 <- Ph1MultipleTesting.resi(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta,
meanY = chart1$model$meanY, sdY = chart1$model$sdY, side = side)
chart11
out <- rep(NA, 6)
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- sum(chart11$sig) > 0
sig <- sig.tr
sig
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, NULL, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
out
X
getChart <- function(Y1, w, H1, Y0, method,
side, FAP0,
log, sta, Y2, H2, tt, TT1) {
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = method,
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE,
sign.method = "DM", adj.method = "none",
nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.resi(chart1$model, nsim = 10000, FAP0 = FAP0, log = log, sta = sta,
meanY = chart1$model$meanY, sdY = chart1$model$sdY, side = side)
out <- rep(NA, 6)
if (class(chart1)[1] != "try-error") {
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart11$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart11$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- sum(chart11$sig) > 0
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
RMSE.ph1.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph1.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
tmp <- BayesianLASSOMonitoring::RMSE.ph2(Y2, chart1$model, NULL, H2, log = log, sta = sta)
RMSE.ph2.tr <- median(tmp$RMSE.tr, na.rm =TRUE)
RMSE.ph2.ma <- median(tmp$RMSE.ma, na.rm =TRUE)
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1.ma,
RMSE.ph2.ma)
}
return(out)
}
remove.packages("BayesianLASSOMonitoring")
