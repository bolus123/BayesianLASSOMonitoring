remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
sum(YY[w - 1 + i - 1, (w - 1) + i -
(w - 1)])
sum(YY[w - 1 + i - 1, (w - 1) + i -
(w - 1)])
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
fit0 <- BayesianLASSOMonitoring::Fit0(Y, model$Phi, model$muq)
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
c
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
fit0 <- BayesianLASSOMonitoring::Fit0(Y, model$Phi, model$muq)
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
i
YY
length(YY)
(w - 1 + i - 1)
((w -
1) + i - (w - 1))
i
(w - 1 + i - 1)
28 + 7
((w -
1) + i - (w - 1))
length(33:7)
YY[(w - 1 + i - 1):((w -
1) + i - (w - 1))]
i
w - 1 + 7 - 1
fit
fit[1, ]
fit[2, ]
fit[, 1]
fit[, 2]
fit[, 3]
fit[55, 3]
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
debug(BayesianLASSOMonitoring::GibbsRFLSM.count)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
model$Y
model$fit
model$fit[, 1]
plot(Y)
points(model$fit[, 1], col = 'red')
plot(model$Y)
points(model$fit[, 1], col = 'red')
length(model$Y)
length(model$fit[, 1])
points(model$fit[, 2], col = 'red')
points(model$fit[, 100], col = 'red')
undebug(BayesianLASSOMonitoring::GibbsRFLSM.count)
fithat <- rep(NA, TT)
for (i in 1:TT) {
fithat[i] <- median(model$fit[i, ])
}
fithat
plot(model$Y)
points(fithat, col = 'red')
plot(model$Y, type = 'l')
points(fithat, col = 'red')
model$resi
Y
Y - fithat
fithat
model$Y - fithat
log(1)
plot(model$Y - fithat, type = l)
plot(model$Y - fithat, type = 'l')
Y
model$Y
model$YY
Y
w <- 28
TT <- 183
q <- 5
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT + w, c(0.03, 0.05, 0.1), lambda = 0.2, pi = 0.2, h = 92 + w, delta = 1)
H <- BayesianLASSOMonitoring::getHMatMT(TT, q)
model <- BayesianLASSOMonitoring::GibbsRFLSM.count(Y[-c(1:w)], w, H = H, Y0 = Y[c(1:w)], q = q)
fithat <- rep(NA, TT)
for (i in 1:TT) {
fithat[i] <- median(model$fit[i, ])
}
plot(model$Y - fithat, type = 'l')
y
Y
length(Y)
183 + 28
plot(resihat[-c(1:w)], type = 'l')
resihat <- model$Y - fithat
plot(resihat[-c(1:w)], type = 'l')
model$fit
model$fit[1, ]
model$resi.ma
model$fit.ma
model$fit.ma[1, ]
model$fit.ma[, 1]
model$fit.ma[, 2]
model$fit.ma[, 3]
model$fit.ma[, 4]
model$fit.ma[, 5]
model$fit.ma[, 6]
model$fit.ma[, 5] * w
model$fit.ma[, 1] * w
model$Y.ma
model$Y.ma * w
ex <- function(mean, sd, lower = 0) {
alpha <- (0 - mean) / sd
Z <- 1 - pnorm(alpha)
mean + sd * dnorm(alpha) / Z
}
ex(-0.5, 1, lower = 0)
ex(-0.5, 28, lower = 0)
ex(-23, 28, lower = 0)
ex(-1, 1, lower = 0)
BayesianLASSOMonitoring::getHMatMT(183, 5)
dim(BayesianLASSOMonitoring::getHMatMT(183, 5))
aaa <- 1:10
matrix(aaa, nrow = 10, ncol = 10)
exp(0)
trans <- function(Y, log = TRUE, const = 1, sta = TRUE){
out <- Y
if (log == TRUE) {
out <- log(out + const)
}
meanY <- 0
sdY <- 1
if (sta == TRUE) {
meanY <- mean(out)
sdY <- sd(out)
out <- (out - meanY) / sdY
}
list(
"Y" = out,
"meanY" = meanY,
"sdY" = sdY
)
}
lower.bound.ma <- function(log = TRUE, const = 1, sta = TRUE, meanY = 0, sdY = 1) {
out <- 0
if (log == TRUE) {
out <- log(0 + const)
}
if (sta == TRUE) {
out <- (out - meanY) / sdY
}
out
}
#' Get a simulation transformed data using Random Flexible Level Shift Model in the retrospective phase under H0 without censoring
#'
#' gets the simulated data
#' @param n is the length of simulated process
#' @param Phi is the matrix of laggy coefficients
#' @param muq is the vector of grand mean
#' @param sigma2 is the vector of variance
#' @param Y1 is the transformed vector
#' @param X is the matrix of X
#' @param Beta is the matrix of coefficients
#' @param Kappa is the matrix of triggering the corresponding beta
#'
#' @export
#' @examples
#' nsim <- 100
#' burnin <- 100
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, H = H, q = q, nsim = nsim, burnin = burnin)
#'
GibbsRFLSM.sim.ph1.H0 <- function(n, nsim, Phi, muq, sigma2, Y1 = rep(median(muq), n),
X = NULL, Beta = NULL, Kappa = NULL) {
m <- dim(Phi)[2]
q <- dim(Phi)[1]
Y.sim <- matrix(Y1, nrow = n, ncol = nsim)
muX <- matrix(0, nrow = n, ncol = m)
if (!is.null(X)) {
muX <- X %*% (Beta * Kappa)
}
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
tmpPhi <- Phi[, tmpsel]
tmpmu0 <- muq[tmpsel] + muX[, tmpsel]
tmpsigma2 <- sigma2[tmpsel]
for (i in (q + 1):n) {
Y.sim[i, j] <- tmpmu0[i, j] + rnorm(1,
mean = (Y.sim[(i - 1):(i - q + 1), j] - tmpmu0[(i - 1):(i - q + 1), j]) %*% tmpPhi,
sd = sqrt(tmpsigma2))
}
}
Y.sim
}
nsim <- 100
burnin <- 100
T <- 100
q <- 5
H <- BayesianLASSOMonitoring::getHMatMT(T, q)
Y <- arima.sim(list(ar = 0.5), n = T)
result <- BayesianLASSOMonitoring::GibbsRFLSM(Y, H = H, q = q, nsim = nsim, burnin = burnin)
result
GibbsRFLSM.sim.ph1.H0 <- function(n, nsim, Phi, muq, sigma2, Y1 = rep(median(muq), n),
X = NULL, Beta = NULL, Kappa = NULL) {
m <- dim(Phi)[2]
q <- dim(Phi)[1]
Y.sim <- matrix(Y1, nrow = n, ncol = nsim)
muX <- matrix(0, nrow = n, ncol = m)
if (!is.null(X)) {
muX <- X %*% (Beta * Kappa)
}
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
tmpPhi <- Phi[, tmpsel]
tmpmu0 <- muq[tmpsel] + muX[, tmpsel]
tmpsigma2 <- sigma2[tmpsel]
for (i in (q + 1):n) {
Y.sim[i, j] <- tmpmu0[i, j] + rnorm(1,
mean = (Y.sim[(i - 1):(i - q + 1), j] - tmpmu0[(i - 1):(i - q + 1), j]) %*% tmpPhi,
sd = sqrt(tmpsigma2))
}
}
Y.sim
}
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
muX[, tmpsel]
tmpmu0
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
(Y.sim[(i - 1):(i - q + 1), j] - tmpmu0[(i - 1):(i - q + 1), j]) %*% tmpPhi
tmpmu0[(i - 1):(i - q + 1), j]
j
(i - 1):(i - q + 1)
GibbsRFLSM.sim.ph1.H0 <- function(n, nsim, Phi, muq, sigma2, Y1 = rep(median(muq), n),
X = NULL, Beta = NULL, Kappa = NULL) {
m <- dim(Phi)[2]
q <- dim(Phi)[1]
Y.sim <- matrix(Y1, nrow = n, ncol = nsim)
muX <- matrix(0, nrow = n, ncol = m)
if (!is.null(X)) {
muX <- X %*% (Beta * Kappa)
}
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
tmpPhi <- Phi[, tmpsel]
tmpmu0 <- muq[tmpsel] + muX[, tmpsel]
tmpsigma2 <- sigma2[tmpsel]
for (i in (q + 1):n) {
Y.sim[i, j] <- tmpmu0[i, j] + rnorm(1,
mean = (Y.sim[(i - 1):(i - q), j] - tmpmu0[(i - 1):(i - q), j]) %*% tmpPhi,
sd = sqrt(tmpsigma2))
}
}
Y.sim
}
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
(Y.sim[(i - 1):(i - q), j] - tmpmu0[(i - 1):(i - q), j])
Y.sim[(i - 1):(i - q), j]
tmpmu0
GibbsRFLSM.sim.ph1.H0 <- function(n, nsim, Phi, muq, sigma2, Y1 = rep(median(muq), n),
X = NULL, Beta = NULL, Kappa = NULL) {
m <- dim(Phi)[2]
q <- dim(Phi)[1]
Y.sim <- matrix(Y1, nrow = n, ncol = nsim)
muX <- matrix(0, nrow = n, ncol = m)
if (!is.null(X)) {
muX <- X %*% (Beta * Kappa)
}
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
tmpPhi <- Phi[, tmpsel]
tmpmu0 <- muq[tmpsel] + muX[, tmpsel]
tmpsigma2 <- sigma2[tmpsel]
for (i in (q + 1):n) {
Y.sim[i, j] <- tmpmu0[i] + rnorm(1,
mean = (Y.sim[(i - 1):(i - q), j] - tmpmu0[(i - 1):(i - q)]) %*% tmpPhi,
sd = sqrt(tmpsigma2))
}
}
Y.sim
}
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2)
Y.sim
hist(Y.sim[, 1])
hist(Y.sim[, 1][-c(1:5)])
tmpsel
tmpsel
tmpPhi
tmpmu0
Y.sim
aa
?BayesianLASSOMonitoring::getXSeasonalityFS
365.25 / 12
X1 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 3.5, 3)
X2 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 30.4375, 3)
X1
X2
? BayesianLASSOMonitoring::GibbsRFLSM
nsim <- 100
burnin <- 100
T <- 100
q <- 5
H <- BayesianLASSOMonitoring::getHMatMT(T, q)
X1 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 3.5, 3)
X2 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 30.4375, 3)
Y <- arima.sim(list(ar = 0.5), n = T)
result <- BayesianLASSOMonitoring::GibbsRFLSM(Y, H = H, X = cbind(X1, x2), q = q, nsim = nsim, burnin = burnin)
nsim <- 100
burnin <- 100
T <- 100
q <- 5
H <- BayesianLASSOMonitoring::getHMatMT(T, q)
X1 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 3.5, 3)
X2 <- BayesianLASSOMonitoring::getXSeasonalityFS(100, 30.4375, 3)
Y <- arima.sim(list(ar = 0.5), n = T)
result <- BayesianLASSOMonitoring::GibbsRFLSM(Y, H = H, X = cbind(X1, X2), q = q, nsim = nsim, burnin = burnin)
result
X1
dim(X1)
X2
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2,
X = cbind(X1, X2), Beta = result$Beta, Kappa = result$Kappa)
muX
muX
Beta
Beta * Kappa
tmpmu0
muX
tmpsel
muq[tmpsel]
muX[, tmpsel]
muX
tmpmu0
Y.sim
Y.sim
aa
#' Caculate the moving averages
#'
#' gets the moving averages
#' @param Y is the input
#' @param w is the length of moving window
#'
#' @export
#' @examples
#' alpha <- c(0.03083069, 0.06242601, 0.09120189)
#' lambda <- 0.239385
#' pi <- 0.1453097
#'
#' TT <- 183
#' w <- 28
#' Y <- rzinpoisinar3(TT + w, alpha, lambda, pi, ceiling(TT / 2) + w, delta = 1, burnin = 100)
#' ma <- movaver(Y, w)
movaver <- function(Y, w = 5){filter(Y, rep(1 / w, w), sides = 1)}
#' Transform the data
#'
#' gets the transformed input
#' @param Y is the input
#' @param log is the flag triggering the log transformation
#' @param const is the constant added to the input during the log transformation
#' @param sta is the flag triggering the standardization
#'
#' @export
#' @examples
#' alpha <- c(0.03083069, 0.06242601, 0.09120189)
#' lambda <- 0.239385
#' pi <- 0.1453097
#'
#' TT <- 183
#' w <- 28
#' Y <- rzinpoisinar3(TT + w, alpha, lambda, pi, ceiling(TT / 2) + w, delta = 1, burnin = 100)
#' ma <- movaver(Y, w)
#' ma.tr <- trans(ma, TRUE, 1, TRUE)
trans <- function(Y, log = TRUE, const = 1, sta = TRUE){
out <- Y
if (log == TRUE) {
out <- log(out + const)
}
meanY <- 0
sdY <- 1
if (sta == TRUE) {
meanY <- mean(out)
sdY <- sd(out)
out <- (out - meanY) / sdY
}
list(
"Y" = out,
"meanY" = meanY,
"sdY" = sdY
)
}
debug(GibbsRFLSM.sim.ph1.H0)
aa <- GibbsRFLSM.sim.ph1.H0(100, 10, result$Phi, result$muq, result$sigma2, Y,
X = cbind(X1, X2), Beta = result$Beta, Kappa = result$Kappa)
Y.sim
aa
result$Phi
aa
plot(Y)
points(aa[, 1])
points(aa[, 2])
points(aa[, 3])
points(aa[, 4])
points(aa[, 45)
points(aa[, 5)
points(aa[, 5])
points(aa[, 6])
points(aa[, 7])
plot(Y)
points(aa[, 1], type = 'l')
points(aa[, 1], type = 'l', col = 'red')
points(aa[, 2], type = 'l', col = 'red')
length((28 + 5 + 1):(100 + 28 - 1))
length((1):(100 + 28 - 1))
length((28):(100 + 28 - 1))
length((28 + q - 1):(100 + 28 - 1))
length((28 + q):(100 + 28 - 1))
(1000 - (100 + 28 - 1)):1000
length((1000 - (100 + 28 - 1)):1000)
length((1000 - (100 + 28)):1000)
length((1000 - (100 + 28 - 2)):1000)
(127 - 28 + 1):127
length((127 - 28 + 1):127)
length((28 + 1):127)
length((28 + 1):127)
GibbsRFLSM.sim.count.ph1.H0 <- function(nsim, n, w, Phi, muq, sigma2,
X = NULL, Beta = NULL, Kappa = NULL,
Y1 = rep(median(muq), n),
Y0 = rep(0, n + w - 1),
log = TRUE, const = 1, sta = TRUE, meanY = 0, sdY = 1) {
n.Y0 <- length(Y0)
Y0 <- Y0[(n.Y0 - (n + w - 1) + 1):n.Y0]
ma <- movaver(Y0)[w:(n + w - 1)]
m <- dim(Phi)[2]
q <- dim(Phi)[1]
Y.sim <- matrix(Y1, nrow = n, ncol = nsim)
muX <- matrix(0, nrow = n, ncol = m)
if (!is.null(X)) {
muX <- X %*% (Beta * Kappa)
}
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
tmpPhi <- Phi[, tmpsel]
tmpmu0 <- muq[tmpsel] + muX[, tmpsel]
tmpsigma2 <- sigma2[tmpsel]
for (i in (q + 1):n) {
Y.sim[i, j] <- tmpmu0[i] + rnorm(1,
mean = (Y.sim[(i - 1):(i - q), j] - tmpmu0[(i - 1):(i - q)]) %*% tmpPhi,
sd = sqrt(tmpsigma2))
lower.bound <- lower.bound.count(ma[i - 1], Y0[i - 1], w, log = log, const = const, sta = sta,
meanY = meanY, sdY = sdY)
Y.sim[i, j] <- ifelse(Y.sim[i, j] < lower.bound, lower.bound, Y.sim[i, j])
}
}
out <- backtrans(Y.sim, log = log, const = const, sta = sta,
meanY = meanY, sdY = sdY)
for (i in (q + 1):n) {
out[i, ] <- round(w * out[i, ] - (w * ma[i - 1] - Y0[i - 1]))
}
out[-c(1:q), ]
}
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
