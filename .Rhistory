X = chart1$model$X, Beta = chart1$model$Beta[, tmpsel],
Kappa = chart1$model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
m <- length(Y0fit)
Y0.sim <- rnorm(m, Y0fit, sqrt(chart1$model$sigma2))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
tmpY.sim <- c(chart1$model$Y.tr[1:q], Y0.sim)
Y0.sim.fit0 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(tmpY.sim,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y0.sim, Y0.sim.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(Y0.sim, Y0.sim.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
b10 <- log(tmp1 / tmp0)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- rep(NA, 87)
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:300) {
Y.fit0 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y.fit1 <- fit.GibbsRFLSM(chart1$model$Y.tr,
chart1$model$Phi[, i], chart1$model$muq[i],
X = chart1$model$X, Beta = chart1$model$Beta[, i],
Kappa = chart1$model$Kappa[, i],
H = chart1$model$H, Gamma = chart1$model$Gamma[, i],
Tau = chart1$model$Tau[, i])
tmp0 <- tmp0 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit0, sd = sqrt(chart1$model$sigma2[i])) / 300
tmp1 <- tmp1 + dnorm(chart1$model$Y.tr[-c(1:q)], Y.fit1, sd = sqrt(chart1$model$sigma2[i])) / 300
}
cs <- log(tmp1 / tmp0)
p.value <- mean(b10.max > max(cs))
p.value
plot(cs)
chart1$model$Y.tr
length(chart1$model$Y.tr)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y0.sim, Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y0.sim, Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param sign.method is .
#' @param adj.method is
#' @param side is side
#'
#'
#' @export
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n - q, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(m, Y0fit, sqrt(model$sigma2[tmpsel]))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
cs
mean(b10.max > max(cs))
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF(chart1$model, 1000))
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(getlogBF)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
length(Y)
U
Y
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y0.sim
Y0fit
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n - q, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y0.sim
length(
Y0.sim
)
tmpY.sim
length(tmpY.sim)
dim(model)
Y0.sim.fit0
length(Y0.sim.fit0)
Y
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Y
Y0.sim.fit0
length(Y0.sim.fit0)
length(Y)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
tmp0 <- rep(0, m)
tmp1 <- rep(0, m)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
warnings
warnings()
debug(getlogBF)
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
length(Y[-c(1:q)])
length(Y0.sim.fit0)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(Y) - q
tmp0 <- rep(0, n)
tmp1 <- rep(0, n)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
b10
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
getlogBF <- function(Y, model) {
m <- dim(model$Phi)[2]
q <- dim(model$Phi)[1]
n <- length(Y) - q
tmp0 <- rep(0, n)
tmp1 <- rep(0, n)
for (i in 1:m) {
Y0.sim.fit0 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim.fit1 <- fit.GibbsRFLSM(Y,
model$Phi[, i], model$muq[i],
X = model$X, Beta = model$Beta[, i],
Kappa = model$Kappa[, i],
H = model$H, Gamma = model$Gamma[, i],
Tau = model$Tau[, i])
tmp0 <- tmp0 + dnorm(Y[-c(1:q)], Y0.sim.fit0, sd = sqrt(model$sigma2[i])) / m
tmp1 <- tmp1 + dnorm(Y[-c(1:q)], Y0.sim.fit1, sd = sqrt(model$sigma2[i])) / m
}
b10 <- log(tmp1 / tmp0)
b10
}
#' Bayesian LASSO Phase I Monitoring
#'
#' gets a posterior sample using Gibbs sampling for Random Flexible Level Shift Model
#' @param model is model.
#' @param sign.method is .
#' @param adj.method is
#' @param side is side
#'
#'
#' @export
Ph1MultipleTesting.BF <- function(model, nsim = 1000) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
mean(b10.max > max(cs))
}
debug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
mean(b10.max > max(cs))
p.value
undebug(Ph1MultipleTesting.BF)
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
list(p.value = p.value, cs = cs, sig = cs > quantile(b10.max, FAP0))
}
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
list(p.value = p.value, cs = cs, sig = cs > quantile(b10.max, 1 - FAP0))
}
Ph1MultipleTesting.BF(chart1$model, 1000)
Ph1MultipleTesting.BF <- function(model, nsim = 1000, FAP0 = 0.2) {
q <- dim(model$Phi)[1]
n <- length(model$Y.tr) - q
m <- dim(model$Phi)[2]
b10.matrix <- matrix(NA, nrow = n, ncol = nsim)
b10.max <- rep(NA, nsim)
for (j in 1:nsim) {
tmpsel <- sample(1:m, 1)
Y0fit <- fit.GibbsRFLSM(model$Y.tr,
model$Phi[, tmpsel], model$muq[tmpsel],
X = model$X, Beta = model$Beta[, tmpsel],
Kappa = model$Kappa[, tmpsel],
H = NULL, Gamma = NULL, Tau = NULL)
Y0.sim <- rnorm(n, Y0fit, sqrt(model$sigma2[tmpsel]))
tmpY.sim <- c(model$Y.tr[1:q], Y0.sim)
b10 <- getlogBF(tmpY.sim, model)
b10.matrix[, j] <- b10
b10.max[j] <- max(b10)
}
cs <- getlogBF(model$Y.tr, model)
p.value <- mean(b10.max > max(cs))
lim <- quantile(b10.max, 1 - FAP0)
list(p.value = p.value, lim = lim, cs = cs, sig = cs > lim)
}
Ph1MultipleTesting.BF(chart1$model, 1000)
#undebug(Ph1MultipleTesting.BF)
qq <- Ph1MultipleTesting.BF(chart1$model, 1000)
qq
remove.packages("BayesianLASSOMonitoring")
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
RMSE.ph1 <- function(Ph1BayesianLASSO.model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0) {
nsim <- dim(Ph1BayesianLASSO.model$Phi)[2]
q <- dim(Ph1BayesianLASSO.model$Phi)[1]
TT <- length(Ph1BayesianLASSO.model$Y.tr)
tmpfit.tr <- rep(NA, TT)
tmpfit.ma <- rep(NA, TT)
tmpresi.tr <- rep(NA, TT)
tmpresi.ma <- rep(NA, TT)
RMSE.tr <- rep(NA, nsim)
RMSE.ma <- rep(NA, nsim)
fit.tr <- matrix(NA, nrow = TT, ncol = nsim)
fit.ma <- matrix(NA, nrow = TT, ncol = nsim)
resi.tr <- matrix(NA, nrow = TT, ncol = nsim)
resi.ma <- matrix(NA, nrow = TT, ncol = nsim)
Y <- Ph1BayesianLASSO.model$Y
Y.tr <- Ph1BayesianLASSO.model$Y.tr
Y.ma <- Ph1BayesianLASSO.model$Y.ma
meanY <- Ph1BayesianLASSO.model$meanY
sdY <- Ph1BayesianLASSO.model$sdY
X <- Ph1BayesianLASSO.model$X
H <- Ph1BayesianLASSO.model$H
for (j in 1:nsim) {
tmpmuq <- Ph1BayesianLASSO.model$muq[j]
tmpPhi <- Ph1BayesianLASSO.model$Phi[, j]
tmpV <- Y.tr - tmpmuq
if (!is.null(X)) {
tmpBeta <- Ph1BayesianLASSO.model$Beta[, j]
tmpKappa <- Ph1BayesianLASSO.model$Kappa[, j]
tmpV <- tmpV - X %*% (tmpBeta * tmpKappa)
}
if (!is.null(H)) {
tmpGamma <- Ph1BayesianLASSO.model$Gamma[, j]
tmpTau <- Ph1BayesianLASSO.model$Tau[, j]
tmpV <- tmpV - H %*% (tmpGamma * tmpTau)
}
for (i in (q + 1):TT) {
tmpfit.tr[i] <- tmpmuq + tmpV[(i - 1):(i - q)] %*% tmpPhi
if (!is.null(X)) {
tmpfit.tr[i] <- tmpfit.tr[i] + X[i, ] %*% (tmpBeta * tmpKappa)
}
if (!is.null(H)) {
tmpfit.tr[i] <- tmpfit.tr[i] + H[i, ] %*% (tmpGamma * tmpTau)
}
tmpresi.tr[i] <- Y.tr[i] - tmpfit.tr[i]
tmpfit.ma[i] <- backtrans(tmpfit.tr[i], log, const, sta, meanY, sdY)
tmpfit.ma[i] <- ifelse(tmpfit.ma[i] < lowerbound, lowerbound, tmpfit.ma[i])
tmpresi.ma[i] <- Y.ma[i] - tmpfit.ma[i]
tmpresi[i] <- Y[i] - tmpfit[i]
}
fit.tr[, j] <- tmpfit.tr
fit.ma[, j] <- tmpfit.ma
resi.tr[, j] <- tmpresi.tr
resi.ma[, j] <- tmpresi.ma
tmpresi.tr <- tmpresi.tr[(q + 1):TT]
RMSE.tr[j] <- sqrt(t(tmpresi.tr) %*% tmpresi.tr / (TT - q))
tmpresi.ma <- tmpresi.ma[(q + 1):TT]
RMSE.ma[j] <- sqrt(t(tmpresi.ma) %*% tmpresi.ma / (TT - q))
}
list("RMSE.tr" = RMSE.tr, "RMSE.ma" = RMSE.ma,
"fit.tr" = fit.tr[-c(1:q), ], "fit.ma" = fit.ma[-c(1:q), ],
"resi.tr" = resi.tr[-c(1:q), ], "resi.ma" = resi.ma[-c(1:q), ])
}
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github
devtools::install_github("bolus123/BayesianLASSOMonitoring")
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(92, 183)
TT2 <- 365
w <- c(1, 3, 7, 14, 28)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
pars
X <- 1
method <- "MT"
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = method,
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE,
sign.method = "DM", adj.method = "none",
nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart11 <- BayesianLASSOMonitoring::Ph1MultipleTesting.BF(chart1$model, FAP0 = FAP0)
out <- rep(NA, 18)
q <- dim(chart1$model$Phi)[1]
start.exact <- ceiling(TT1 * tt) - q
end <- ceiling(TT1 * tt) - q + w - 1
TP.app <- sum(chart11$sig[start.exact:end])
FN.app <- sum(1 - chart11$sig[start.exact:end])
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart11$sig[-c(start.exact:end)])
FP.app <- sum(chart11$sig[-c(start.exact:end)])
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig.tr <- chart11$p.value < FAP0
sig <- sig.tr
#debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
debug(BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta))
BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
debug( BayesianLASSOMonitoring::RMSE.ph1)
tmp <- BayesianLASSOMonitoring::RMSE.ph1(chart1$model, log = log, sta = sta)
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
