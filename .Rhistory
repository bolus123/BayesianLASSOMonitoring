#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' Fit(Y, result$Phi, result$Mu)
Fit <- function(Y, Phi, Mu) {
T <- length(Y)
q <- dim(Phi)[1]
nsim <- dim(Phi)[2]
ff <- matrix(NA, nrow = T - q, ncol = nsim)
for (ii in seq(nsim)) {
V <- matrix(Y, ncol = 1) - Mu[, ii]
Vas <- getV(V, q)
V <- V[-c(1:q)]
Vas <- Vas[-c(1:q), ]
ff[, ii] <- Vas %*% Phi[, ii] + Mu[-c(1:q), ii]
}
rbind(Mu[1:q, ], ff)
}
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' Fit(Y, result$Phi, result$Mu)
GibbsRFLSM.sim <- function(Y, Phi, Mu, sigma2) {
TT <- length(Y)
q <- length(Phi)
sim <- rep(NA, TT)
sim[1:q] <- Y[1:q]
for (ii in (q + 1):TT) {
sim[ii] <- Mu[ii] + (sim[(ii - 1):(ii - q)] - Mu[(ii - 1):(ii - q)]) %*%
Phi + rnorm(1, 0, sqrt(sigma2))
}
sim
}
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' Fit(Y, result$Phi, result$Mu)
GibbsRFLSM.simmax.Yao <- function(Y, Phi, Mu, sigma2,
nsim = 1000) {
q <- dim(Phi)[1]
out <- rep(NA, nsim)
xbar <- mean(Y[-c(1:q)])
std <- sd(Y[-c(1:q)])
m <- dim(Phi)[2]
for (i in seq(nsim)) {
k <- sample(1:m, 1)
tmpPhi <- Phi[, k]
tmpMu <- Mu[, k]
tmpsigma2 <- sigma2[k]
tmp <- GibbsRFLSM.sim(Y, tmpPhi, tmpMu, tmpsigma2)
out[i] <- max(((tmp[-c(1:q)] - xbar) / std) ^ 2)
}
out
}
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' Fit(Y, result$Phi, result$Mu)
GibbsRFLSM.simmax.residual <- function(Y, Phi, Mu, sigma2,
Phihat, Muhat, sigma2hat,
nsim = 1000) {
q <- dim(Phi)[1]
out <- rep(NA, nsim)
m <- dim(Phi)[2]
for (i in seq(nsim)) {
k <- sample(1:m, 1)
tmpPhi <- Phi[, k]
tmpMu <- Mu[, k]
tmpsigma2 <- sigma2[k]
tmp <- GibbsRFLSM.sim(Y, tmpPhi, tmpMu, tmpsigma2)
tmpV <- tmp - Muhat
tmpVas <- getV(tmpV, q)
tmpV <- tmpV[-c(1:q)]
tmpVas <- tmpVas[-c(1:q), ]
out[i] <- max((tmpV - tmpVas %*% Phihat) ^ 2 / sigma2hat)
}
out
}
library(BayesianLassoMonitoring)
roxygen2::roxygenise()
library(BayesianLassoMonitoring)
devtools::install_github("bolus123/BayesianLassoMonitoring")
library(BayesianLassoMonitoring)
library(lubridate)
movaver <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 1)}
dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2023 Summer/BayesianMonitoring/postermodel.rda')
mw <- 14
movingaverages <- movaver(dat$Freq + 0.5, mw)
date <- as.Date(dat$Day, "%m/%d/%y")
year <- year(date)
month <- month(date)
sta2017 <- min(which(year == 2017))
end2017 <- max(which(year == 2017))
sta2018 <- min(which(year == 2018))
end2018 <- max(which(year == 2018))
sta2019 <- min(which(year == 2019))
end2019 <- max(which(year == 2019))
sta2017July <- min(which(((year == 2017) * (month == 7)) == 1))
sta2018July <- min(which(((year == 2018) * (month == 7)) == 1))
sta2019July <- min(which(((year == 2019) * (month == 7)) == 1))
movingaverages0 <- movingaverages[sta2017:end2019]
MedianPhi <- rep(NA, 5)
for (i in 1:5) {
MedianPhi[i] <- median(mo0$Phi[i, ])
}
MedianMu <- rep(median(mo0$muq), 1095)
Mediansigma2 <- median(mo0$sigma2)
cc1 <- GibbsRFLSM.simmax.residual(movingaverages0, mo0$Phi,
matrix(mo0$muq, nrow = 1095, ncol = 1000, byrow = T),
mo0$sigma2,
MedianPhi,
MedianMu,
Mediansigma2,
nsim = 1000)
cc2 <- GibbsRFLSM.simmax.Yao(movingaverages0, mo0$Phi,
matrix(mo0$muq, nrow = 1095, ncol = 1000, byrow = T),
mo0$sigma2,
nsim = 1000)
GibbsRFLSM.PPP.Yao <- function(Y, Phi, Mu, sigma2, FAP0 = 0.2,
nsim = 1000) {
q <- dim(Phi)[1]
n <- length(Y) - q
ccrep <- GibbsRFLSM.simmax.Yao(Y, Phi, Mu, sigma2,
nsim)
tmpYao <- (Y[-c(1:5)] - mean(Y[-c(1:5)])) ^ 2 / var(Y[-c(1:5)])
tmpOmni <- mean(ccrep > max(tmpYao))
tmpInd <- rep(NA, n)
for (i in 1:n) {
tmpInd[i] <- mean(ccrep > tmpYao[i])
}
list("Omni" = tmpOmni, "Ind" = tmpInd)
}
GibbsRFLSM.PPP.Yao(movingaverages0, mo0$Phi, matrix(mo0$muq, nrow = 1095, ncol = 1000, byrow = T), mo0$sigma2, 1000)
GibbsRFLSM.PPP.residual <- function(Y, Phi, Mu, sigma2,
Phihat, Muhat, sigma2hat,
nsim = 1000) {
q <- dim(Phi)[1]
n <- length(Y) - q
ccrep <- GibbsRFLSM.simmax.residual(Y, Phi, Mu, sigma2,
Phihat, Muhat, sigma2hat,
nsim)
tmp <- Y - Muhat
tmpV <- getV(tmp, q)
tmp <- tmp[-c(1:q)]
tmpV <- tmpV[-c(1:q), ]
tmpresi <- (tmp - tmpV %*% Phihat) ^ 2 / sigma2hat
tmpOmni <- mean(ccrep > max(tmpresi))
tmpInd <- rep(NA, n)
for (i in 1:n) {
tmpInd[i] <- mean(ccrep > tmpresi[i])
}
list("Omni" = tmpOmni, "Ind" = tmpInd)
}
GibbsRFLSM.PPP.residual(movingaverages0, mo0$Phi,
matrix(mo0$muq, nrow = 1095, ncol = 1000, byrow = T),
mo0$sigma2,
MedianPhi,
MedianMu,
Mediansigma2,
nsim = 1000)
roxygen2::roxygenise()
GibbsRFLSM.PPP.residual <- function(Y, Phi, muq, sigma2,
Phihat, muqhat, sigma2hat,
nsim = 1000) {
q <- dim(Phi)[1]
n <- length(Y)
m <- dim(Phi)[2]
Muq <- matrix(muq, nrow = n, ncol = m, byrow = T)
Muqhat <- rep(muqhat, n)
ccrep <- GibbsRFLSM.simmax.residual(Y, Phi, Muq, sigma2,
Phihat, Muqhat, sigma2hat,
nsim)
tmp <- Y - muqhat
tmpV <- getV(tmp, q)
tmp <- tmp[-c(1:q)]
tmpV <- tmpV[-c(1:q), ]
tmpresi <- (tmp - tmpV %*% Phihat) ^ 2 / sigma2hat
tmpOmni <- mean(ccrep > max(tmpresi))
tmpInd <- rep(NA, n - q)
for (i in 1:(n - q)) {
tmpInd[i] <- mean(ccrep > tmpresi[i])
}
list("Omni" = tmpOmni, "Ind" = tmpInd)
}
GibbsRFLSM.PPP.residual(movingaverages0, mo0$Phi,
mo0$muq, mo0$sigma2,
MedianPhi,
median(mo0$muq),
Mediansigma2,
nsim = 1000)
roxygen2::roxygenise()
aa <- GibbsRFLSM.PPP.residual(movingaverages0, mo0$Phi,
mo0$muq, mo0$sigma2,
MedianPhi,
median(mo0$muq),
Mediansigma2,
nsim = 1000)
which(aa$Ind <= 0.2)
out <- rep(NA, 1090)
for ( i in seq(1090)) {
out[i] <- 1 - mean(cc1 > tmpresi[i])
}
cc1 <- GibbsRFLSM.simmax.residual(movingaverages0, mo0$Phi,
matrix(mo0$muq, nrow = 1095, ncol = 1000, byrow = T),
mo0$sigma2,
MedianPhi,
MedianMu,
Mediansigma2,
nsim = 1000)
shift1 <- which(tmpresi > quantile(cc1, 0.8))
tmp <- movingaverages0 - MedianMu
tmpV <- getV(tmp, 5)
tmp <- tmp[-c(1:5)]
tmpV <- tmpV[-c(1:5), ]
tmpresi <- (tmp - tmpV %*% MedianPhi) ^ 2 / Mediansigma2
shift1 <- which(tmpresi > quantile(cc1, 0.8))
shift1
mo11 <- GibbsRFLSM(
Y1, 3, diag(nrow = 3), 0.1, 0.1, 0.1, 0.1,
1, 1, 0.1, "MonoALASSO", Inf, 0,
1000, 1, 1000, 1e-6, H
)
library(BayesianLassoMonitoring)
library(lubridate)
movaver <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 1)}
#dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
#load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2023 Summer/BayesianMonitoring/postermodel.rda')
dat <- read.csv(file = "C:/Users/bolus/Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
movingaverages <- movaver(dat$Freq + 0.5, mw)
library(BayesianLassoMonitoring)
library(lubridate)
movaver <- function(x, n = 5){filter(x, rep(1 / n, n), sides = 1)}
#dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
#load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2023 Summer/BayesianMonitoring/postermodel.rda')
dat <- read.csv(file = "C:/Users/bolus/Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
dat <- read.csv(file = "C:/Users/bolus/Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
load(file = 'C:/Users/bolus/Box/2023 Summer/BayesianMonitoring/postermodel.rda')
dat <- read.csv(file = "/Users/yuihuiyao/Library/CloudStorage/Box-Box/Yuhui R21/Daily opioid-overdose-related ER visits in Walker.csv")
load(file = '/Users/yuihuiyao/Library/CloudStorage/Box-Box/2023 Summer/BayesianMonitoring/postermodel.rda')
mw <- 14
movingaverages <- movaver(dat$Freq + 0.5, mw)
date <- as.Date(dat$Day, "%m/%d/%y")
year <- year(date)
month <- month(date)
sta2017 <- min(which(year == 2017))
end2017 <- max(which(year == 2017))
sta2018 <- min(which(year == 2018))
end2018 <- max(which(year == 2018))
sta2019 <- min(which(year == 2019))
end2019 <- max(which(year == 2019))
sta2017July <- min(which(((year == 2017) * (month == 7)) == 1))
sta2018July <- min(which(((year == 2018) * (month == 7)) == 1))
sta2019July <- min(which(((year == 2019) * (month == 7)) == 1))
movingaverages0 <- movingaverages[sta2017:end2019]
mo0$Phi
?lapply
?apply
apply(mo0$Phi, 1, median)
GibbsRFLSM.PPP.residual <- function(Y, Phi, muq, sigma2,
Phihat, muqhat, sigma2hat,
nsim = 1000) {
q <- dim(Phi)[1]
n <- length(Y)
m <- dim(Phi)[2]
Muq <- matrix(muq, nrow = n, ncol = m, byrow = T)
Muqhat <- rep(muqhat, n)
ccrep <- GibbsRFLSM.simmax.residual(Y, Phi, Muq, sigma2,
Phihat, Muqhat, sigma2hat,
nsim)
tmp <- Y - muqhat
tmpV <- getV(tmp, q)
tmp <- tmp[-c(1:q)]
tmpV <- tmpV[-c(1:q), ]
tmpresi <- (tmp - tmpV %*% Phihat) ^ 2 / sigma2hat
tmpOmni <- mean(ccrep > max(tmpresi))
tmpInd <- rep(NA, n - q)
for (i in 1:(n - q)) {
tmpInd[i] <- mean(ccrep > tmpresi[i])
}
list("Omni" = tmpOmni, "Ind" = tmpInd)
}
GibbsRFLSM.PPP.Yao <- function(Y, Phi, muq, sigma2, FAP0 = 0.2,
nsim = 1000) {
q <- dim(Phi)[1]
n <- length(Y)
m <- dim(Phi)[2]
Muq <- matrix(muq, nrow = n, ncol = m, byrow = T)
ccrep <- GibbsRFLSM.simmax.Yao(Y, Phi, Muq, sigma2,
nsim)
tmpYao <- (Y[-c(1:q)] - mean(Y[-c(1:q)])) ^ 2 / var(Y[-c(1:q)])
tmpOmni <- mean(ccrep > max(tmpYao))
tmpInd <- rep(NA, (n - q))
for (i in 1:(n - q)) {
tmpInd[i] <- mean(ccrep > tmpYao[i])
}
list("Omni" = tmpOmni, "Ind" = tmpInd)
}
GibbsRFLSM.PPP.Yao(movingaverages0, mo0$Phi, mo0$muq, mo0$sigma2)
log(1.18)
log(c(0.89, 1.58))
log(c(1.48, 1.04, 2.11))
log(c(2.01, 1.44, 2.80))
log(c(1.03, 0.65, 1.64))
log(c(0.84, 0.54, 1.3))
log(c(0.79, 0.5, 1.25))
log(c(0.6, 0.38, 0.96))
log(c(1.65, 0.98, 2.76))
aa <- matrix(
c(1.65, 0.98,2.76,
1.31, 0.72,2.37,
1.89, 0.96,3.76,
0.60, 0.41,0.89,
1.24, 0.79,1.96,
1.14, 0.71,1.83,
1.13, 0.76,1.67,
1.08, 0.80,1.46,
0.97, 0.63,1.50,
3.51, 2.49,4.94,
2.38, 1.05,5.43,
2.10, 1.51,2.92), ncol = 3, byrow = TRUE)
aa
log(aa)
round(log(aa), 2)
11586068!
VGAM::rzipois(183, 1, 0.1)
VGAM::rzipois(183, 1, 0.5)
mean(VGAM::rzipois(183, 1, 0.5))
rzinpoisinr1 <- function(n, lambda, p0, alpha) {}
?rbinom
rzinpoisinr1 <- function(n, lambda, p0, alpha) {
out <- rep(NA, n + 1)
out[1] <- VGAM::rzipois(1, lambda, p0)
for (i in 2:(n + 1)) {
out[i] <- rbinom(1, out[i - 1], alpha) +
VGAM::rzipois(1, lambda, p0)
}
out[2:(n + 1)]
}
rzinpoisinr1(183, 1, 0.5, 0.1)
mean(rzinpoisinr1(183, 1, 0.5, 0.1))
Rcpp::compileAttributes()
roxygen2::roxygenise()
rzinpoisinr1 <- function(n, lambda, p0, alpha, burnin = 100) {
out <- rep(NA, n + burnin)
out[1:burnin] <- VGAM::rzipois(burnin, lambda, p0)
for (i in (burnin + 1):(n + burnin)) {
out[i] <- rbinom(1, out[i - 1], alpha) +
VGAM::rzipois(1, lambda, p0)
}
out[(burnin + 1):(n + burnin)]
}
rzinpoisinr1(183, 1, 0.5, 0.1)
acf(rzinpoisinr1(183, 1, 0.5, 0.1))
pacf(rzinpoisinr1(183, 1, 0.5, 0.1))
rzinpoisinr1 <- function(n, lambda, p0, alpha, burnin = 100) {
out <- rep(NA, n + burnin)
out[1] <- VGAM::rzipois(1, lambda, p0)
for (i in 2:(n + burnin)) {
out[i] <- rbinom(1, out[i - 1], alpha) +
VGAM::rzipois(1, lambda, p0)
}
out[(burnin + 1):(n + burnin)]
}
acf(rzinpoisinr1(183, 1, 0.5, 0.1))
rzinpoisinr1(183, 1, 0.5, 0.1)
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(12, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(12, 3, 3)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getHMatCycle(12, 3, 3)
Rcpp::compileAttributes()
roxygen2::roxygenise()
remove.packages("BayesianLassoMonitoring")
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLassoMonitoring")
aa <- NULL
bb <- rnorm(10)
cbind(aa, bb)
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
remove.packages("BayesianLassoMonitoring")
devtools::install_github("bolus123/BayesianLassoMonitoring")
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLassoMonitoring")
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getXSeasonalityFS(100, 15, 7)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getXSeasonalityFS(100, 15, 7)
getXSeasonalityFS(100, 15, 7)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getXSeasonalityFS(100, 15, 7)
getXSeasonalityFS(100, 15, 7)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
getXSeasonalityFS(100, 15, 7)
Rcpp::sourceCpp("src/BayesianLASSOMonitoring.cpp")
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
source("~/Documents/GitHub/BayesianLASSOMonitoring/R/GibbsRLSM.R")
roxygen2::roxygenise()
rm(GibbsRFLSM)
roxygen2::roxygenise()
remove.packages("BayesianLassoMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
roxygen2::roxygenise()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLASSOMonitoring")
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLASSOMonitoring")
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
