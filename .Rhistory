ee
ee <- p.adjust(pvalue[, 2], "BH")
ee
ee <- p.adjust(pvalue[, 2], "BH") < 0.2
ee
ee <- p.adjust(pvalue[, 2], "BH") < 0.05
ee
pvalue
?v
?p.adjust
ee <- p.adjust(pvalue[, 2], "bonferroni")
ee
ee <- p.adjust(pvalue[, 2], "holm")
ee
ee <- p.adjust(pvalue[, 2], "hochberg")
ee
ff <- ee < 0.2
ff
ee <- matrix(NA, nrow = 178, ncol = 4)
ee[, 1] <- p.adjust(pvalue[, 2], "holm")
ee[, 2] <- p.adjust(pvalue[, 2], "hochberg")
ee[, 3] <- p.adjust(pvalue[, 2], "BH")
ee[, 4] <- p.adjust(pvalue[, 2], "none")
ee
ff <- ee < 0.2
ff
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
model <- GibbsRFLSM.count(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, log = log, sta = sta)
bb <- H1 %*% (model$Gamma * model$Tau)
cc <- matrix(NA, nrow = 178, ncol = 1000)
for (i in 1:178) {
if (i == 1) {
cc[i, ] <- bb[i + q, ]
} else {
cc[i, ] <- bb[i + q, ] - bb[i + q - 1, ]
}
}
sign <- matrix(NA, nrow = 178, ncol = 3)
sign[, 1] <- rowSums(cc > 0)
sign[, 2] <- rowSums(cc == 0)
sign[, 3] <- rowSums(cc < 0)
tmp <- cbind(sign[, 1] - sign[, 3], 1000, sign[, 2] / 1000)
pvalue <- matrix(NA, nrow = 178, ncol = 3)
sig <- matrix(NA, nrow = 178, ncol = 1)
alpha <- 0.2 / 178
for (i in 1:178) {
if (tmp[i, 3] == 1) {
pvalue[i, 1] <- 1
pvalue[i, 2] <- 1
pvalue[i, 3] <- 1
sig[i] <- 0
} else {
pvaluetmp <- ptrinomial(tmp[i, 1], tmp[i, 2], tmp[i, 3])
pvalue[i, 1] <- pvaluetmp
pvalue[i, 2] <- 1 - pvaluetmp
pvalue[i, 3] <- 2 * min(pvaluetmp, 1 - pvaluetmp)
}
}
ee <- matrix(NA, nrow = 178, ncol = 4)
ee[, 1] <- p.adjust(pvalue[, 2], "holm")
ee[, 2] <- p.adjust(pvalue[, 2], "hochberg")
ee[, 3] <- p.adjust(pvalue[, 2], "BH")
ee[, 4] <- p.adjust(pvalue[, 2], "none")
ff <- ee < 0.2
ff
ee <- matrix(NA, nrow = 178, ncol = 7)
ee[, 1] <- p.adjust(pvalue[, 2], "holm")
ee[, 2] <- p.adjust(pvalue[, 2], "hochberg")
ee[, 3] <- p.adjust(pvalue[, 2], "hommel")
ee[, 4] <- p.adjust(pvalue[, 2], "bonferroni")
ee[, 5] <- p.adjust(pvalue[, 2], "BH")
ee[, 6] <- p.adjust(pvalue[, 2], "BY")
ee[, 7] <- p.adjust(pvalue[, 2], "none")
ff <- ee < 0.2
ff
plot(model$Y.tr)
plot(model$Y.tr[120])
plot(model$Y.tr[119])
plot(model$Y.tr[120])
boxplot(t(cc))
cc
tmp
sign
?pbinom
i <- 1
pvaluetmp <- pbinom(sign[i, 1] + sign[i, 2] / 2, 1000, 0.5)
pvaluetmp
pvalue1 <- matrix(NA, nrow = 178, ncol = 3)
for (i in 1:178) {
pvaluetmp <- pbinom(sign[i, 1] + sign[i, 2] / 2, 1000, 0.5)
pvalue1[i, 1] <- pvaluetmp
pvalue1[i, 2] <- 1 - pvaluetmp
pvalue1[i, 3] <- 2 * min(1 - pvaluetmp, pvaluetmp)
}
pvalue1
ee1 <- matrix(NA, nrow = 178, ncol = 7)
ee1[, 1] <- p.adjust(pvalue1[, 2], "holm")
ee1[, 2] <- p.adjust(pvalue1[, 2], "hochberg")
ee1[, 3] <- p.adjust(pvalue1[, 2], "hommel")
ee1[, 4] <- p.adjust(pvalue1[, 2], "bonferroni")
ee1[, 5] <- p.adjust(pvalue1[, 2], "BH")
ee1[, 6] <- p.adjust(pvalue1[, 2], "BY")
ee1[, 7] <- p.adjust(pvalue1[, 2], "none")
ee1
ff1 < ee1 < 0.2
ff1 <- ee1 < 0.2
ff1
tmp <- cbind(sign[, 1] - sign[, 3], 1000, sign[, 2] / 1000)
pvalue <- matrix(NA, nrow = 178, ncol = 3)
sig <- matrix(NA, nrow = 178, ncol = 1)
alpha <- 0.2 / 178
for (i in 1:178) {
if (tmp[i, 3] == 1) {
pvalue[i, 1] <- 1
pvalue[i, 2] <- 1
pvalue[i, 3] <- 1
sig[i] <- 0
} else {
pvaluetmp <- ptrinomial(tmp[i, 1], tmp[i, 2], tmp[i, 3])
pvalue[i, 1] <- pvaluetmp
pvalue[i, 2] <- 1 - pvaluetmp
pvalue[i, 3] <- 2 * min(pvaluetmp, 1 - pvaluetmp)
}
}
ee <- matrix(NA, nrow = 178, ncol = 7)
ee[, 1] <- p.adjust(pvalue[, 2], "holm")
ee[, 2] <- p.adjust(pvalue[, 2], "hochberg")
ee[, 3] <- p.adjust(pvalue[, 2], "hommel")
ee[, 4] <- p.adjust(pvalue[, 2], "bonferroni")
ee[, 5] <- p.adjust(pvalue[, 2], "BH")
ee[, 6] <- p.adjust(pvalue[, 2], "BY")
ee[, 7] <- p.adjust(pvalue[, 2], "none")
ff <- ee < 0.2
ff
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 2
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
model <- GibbsRFLSM.count(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, log = log, sta = sta)
bb <- H1 %*% (model$Gamma * model$Tau)
cc <- matrix(NA, nrow = 178, ncol = 1000)
for (i in 1:178) {
if (i == 1) {
cc[i, ] <- bb[i + q, ]
} else {
cc[i, ] <- bb[i + q, ] - bb[i + q - 1, ]
}
}
sign <- matrix(NA, nrow = 178, ncol = 3)
sign[, 1] <- rowSums(cc > 0)
sign[, 2] <- rowSums(cc == 0)
sign[, 3] <- rowSums(cc < 0)
pvalue1 <- matrix(NA, nrow = 178, ncol = 3)
for (i in 1:178) {
pvaluetmp <- pbinom(sign[i, 1] + sign[i, 2] / 2, 1000, 0.5)
pvalue1[i, 1] <- pvaluetmp
pvalue1[i, 2] <- 1 - pvaluetmp
pvalue1[i, 3] <- 2 * min(1 - pvaluetmp, pvaluetmp)
}
ee1 <- matrix(NA, nrow = 178, ncol = 7)
ee1[, 1] <- p.adjust(pvalue1[, 2], "holm")
ee1[, 2] <- p.adjust(pvalue1[, 2], "hochberg")
ee1[, 3] <- p.adjust(pvalue1[, 2], "hommel")
ee1[, 4] <- p.adjust(pvalue1[, 2], "bonferroni")
ee1[, 5] <- p.adjust(pvalue1[, 2], "BH")
ee1[, 6] <- p.adjust(pvalue1[, 2], "BY")
ee1[, 7] <- p.adjust(pvalue1[, 2], "none")
ff1 <- ee1 < 0.2
ff1
tmp <- cbind(sign[, 1] - sign[, 3], 1000, sign[, 2] / 1000)
pvalue <- matrix(NA, nrow = 178, ncol = 3)
sig <- matrix(NA, nrow = 178, ncol = 1)
alpha <- 0.2 / 178
for (i in 1:178) {
if (tmp[i, 3] == 1) {
pvalue[i, 1] <- 1
pvalue[i, 2] <- 1
pvalue[i, 3] <- 1
sig[i] <- 0
} else {
pvaluetmp <- ptrinomial(tmp[i, 1], tmp[i, 2], tmp[i, 3])
pvalue[i, 1] <- pvaluetmp
pvalue[i, 2] <- 1 - pvaluetmp
pvalue[i, 3] <- 2 * min(pvaluetmp, 1 - pvaluetmp)
}
}
ee <- matrix(NA, nrow = 178, ncol = 7)
ee[, 1] <- p.adjust(pvalue[, 2], "holm")
ee[, 2] <- p.adjust(pvalue[, 2], "hochberg")
ee[, 3] <- p.adjust(pvalue[, 2], "hommel")
ee[, 4] <- p.adjust(pvalue[, 2], "bonferroni")
ee[, 5] <- p.adjust(pvalue[, 2], "BH")
ee[, 6] <- p.adjust(pvalue[, 2], "BY")
ee[, 7] <- p.adjust(pvalue[, 2], "none")
ff <- ee < 0.2
ff
plot(ee[, 1])
plot(ee[, 2])
mean(ee[, 1])
mean(ee[, 2])
mean(ee1[, 2])
mean(ee1[, 1])
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
model <- GibbsRFLSM.count(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, log = log, sta = sta)
bb <- H1 %*% (model$Gamma * model$Tau)
cc <- matrix(NA, nrow = 178, ncol = 1000)
for (i in 1:178) {
if (i == 1) {
cc[i, ] <- bb[i + q, ]
} else {
cc[i, ] <- bb[i + q, ] - bb[i + q - 1, ]
}
}
sign <- matrix(NA, nrow = 178, ncol = 3)
sign[, 1] <- rowSums(cc > 0)
sign[, 2] <- rowSums(cc == 0)
sign[, 3] <- rowSums(cc < 0)
pvalue1 <- matrix(NA, nrow = 178, ncol = 3)
for (i in 1:178) {
pvaluetmp <- pbinom(sign[i, 1] + sign[i, 2] / 2, 1000, 0.5)
pvalue1[i, 1] <- pvaluetmp
pvalue1[i, 2] <- 1 - pvaluetmp
pvalue1[i, 3] <- 2 * min(1 - pvaluetmp, pvaluetmp)
}
ee1 <- matrix(NA, nrow = 178, ncol = 7)
ee1[, 1] <- p.adjust(pvalue1[, 2], "holm")
ee1[, 2] <- p.adjust(pvalue1[, 2], "hochberg")
ee1[, 3] <- p.adjust(pvalue1[, 2], "hommel")
ee1[, 4] <- p.adjust(pvalue1[, 2], "bonferroni")
ee1[, 5] <- p.adjust(pvalue1[, 2], "BH")
ee1[, 6] <- p.adjust(pvalue1[, 2], "BY")
ee1[, 7] <- p.adjust(pvalue1[, 2], "none")
ff1 <- ee1 < 0.2
ff1
ff1[, 1]
mean(ff1[, 1])
mean(ff1[, 2])
mean(ff1[, 7])
mean(ff1[, 3])
plot(ee1[, 1])
plot(ee1[, 2])
plot(ee1[, 3])
plot(ee1[, 4])
plot(ee1[, 7])
plot(ee1[, 5])
plot(ee1[, 6])
plot(ee1[, 7])
?adj.pvalue
?p.adjust
Rcpp::compileAttributes()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::install_github("bolus123/BayesianLASSOMonitoring")
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
roxygen2::roxygenise()
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model)
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 2
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model)
BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model) < 0.2
which(BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model) < 0.2)
chart1$model$X
chart1$model$H * (chart1$model$Gamma * chart1$model$Tau)
chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau)
dim(chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau))
vv <- chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau)
vv <- vv[-c(1:q), ]
vv
dim(vv)
chart1$model$muq + vv
dim(chart1$model$muq)
chart1$model$muq + vv
BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model)
BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model, sign.method = "trinomial", adj.method = "BH")
aa <- BayesianLASSOMonitoring::Ph1MultipleTesting(chart1$model, sign.method = "trinomial", adj.method = "BH")
chart1$adj.pvalue
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE, adj.method = "none"), silent = TRUE)
#debug(BayesianLASSOMonitoring::adjalpha.ph2)
chart2 <- BayesianLASSOMonitoring::Ph2BayesianLASSO.EWMA(Y2, chart1, H = H2sim,
Y1 = Y1[(length(Y1) - w - q + 2):length(Y1)],
H1 = H1[(length(Y1) - q + 1):length(Y1), ],
log = log, sta = sta)
roxygen2::block_get_tag()
