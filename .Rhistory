"tautheta1" = 1,
"tautheta2" = 1,
"sigma2a" = 1,
"sigma2b" = 1,
"updatelambda2" = 1,
"lambda2alpha" = 1,
"lambda2beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"lowerbound" = 0,
"rounding" = 1,
"lambda2" = NULL,
"theta" = NULL
)
bset2 <- bset1
bset2$method <- "regression"
bset3 <- bset1
bset3$method <- "LASSO"
bset4 <- bset1
bset4$method <- "ALASSO"
bset5 <- bset1
bset5$method <- "LASSO"
bset5$phimono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$phimono <- 1
bset <- bset1
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMX(Y1, bset, H = H1))
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, bset, FAP0 = FAP0, side = side), silent = TRUE)
chart2
chart2[, 1]
chart2[1, ]
chart2$grandsig
chart2$sig
chart2$adj.alpha
chart2$Yph1
ph1pest <- rep(NA, length(Y1))
Yph1 <- matrix(NA, nrow = length(Y1), ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
ii <- 1
tmpsel <- sample(1:300, 1)
Yph1[, ii] <- BayesianLASSOMonitoring::simYph1(matrix(chart1$Yyj[, tmpsel]), matrix(chart1$Phi[, tmpsel]), matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32)
BayesianLASSOMonitoring::simYph1(matrix
BayesianLASSOMonitoring::simYph1?
?BayesianLASSOMonitoring::simYph1
Yph1[, ii] <- BayesianLASSOMonitoring::simYXph1(matrix(chart1$Yyj[, tmpsel]), matrix(chart1$Phi[, tmpsel]), matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32, as.matrix(chart1$Z[, tmpsel]))
BayesianLASSOMonitoring::simYXph1(matrix(chart1$Yyj[, tmpsel]), matrix(chart1$Phi[, tmpsel]), matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32, as.matrix(chart1$Z[, tmpsel]))
? BayesianLASSOMonitoring::simYXph1
Yph1[, ii] <- BayesianLASSOMonitoring::simYXph1(as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32, as.matrix(chart1$Z[, tmpsel]))
Yph1[, ii] <- BayesianLASSOMonitoring::simYXph1(as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
Yph1[, ii] <- BayesianLASSOMonitoring::simYXph1(as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
as.matrix(tmpMu1[, tmpsel] + chart1$muq[tmpsel])
Yph1[, ii] <- BayesianLASSOMonitoring::simYXph1(as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu1[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
Yph1
Yph1[, 1]
dim(chart2$Yph1)
?BayesianLASSOMonitoring::simYph2
?BayesianLASSOMonitoring::simYXph2
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y[, tmpsel]), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$muq[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
as.matrix(tmpMu2[, tmpsel] + chart1$muq[tmpsel])
tmpMu2
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
dim(tmpMu2)
BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y[, tmpsel]), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
length(Y2)
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
tmp
Yph1[, ii] <- tmp[1:length(chart1$Y)]
Yph2[, ii] <- tmp[(length(chart1$Y) + 1):length(tmp)]
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
tmp
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
Yph1[, ii] <- tmp[1:length(chart1$Y)]
Yph2[, ii] <- tmp[(length(chart1$Y) + 1):length(tmp)]
}
}
Yph1
Yph1[, 1]
Yph1[, 2]
Yph1[, 3]
Yph1[, 4]
Yph1[, 5]
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1) - dim(chart1$Phi)[1])) {
ph1pest[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph1pest
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1))) {
ph1pest[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
if (class(chart1)[1] != "try-error") {
ph2pest <- rep(NA, length(Y2))
for (ii in 1:length(Y2)) {
ph2pest[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
ph1pest
ph2pest
median(Yph1[1, ])
median(Yph1[100, ])
hist(Yph1[1, ])
hist(Yph1[2, ])
hist(Yph1[=3, ])
hist(Yph1[3, ])
hist(Yph1[5, ])
length(Y2)
ph1pest <- rep(NA, length(Y1))
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1))) {
ph1pest[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pest <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pest[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 6)
tt
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
start.exact
end
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TP.app
FN.app
sensitivity.app
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
specificity.app
sensitivity.app
ppv.app <- TP.app / (TP.app + FP.app)
ppv.app
TP.app + FP.app
sig <- chart2$grandsig
sig
RMSE.ph1 <- sqrt(mean((Y1[-c(1:q)] - ph1pest) ^ 2, na.rm = TRUE))
RMSE.ph2 <- sqrt(mean((Y2 - ph2pest) ^ 2, na.rm = TRUE))
RMSE.ph1 <- sqrt(mean((Y1 - ph1pest) ^ 2, na.rm = TRUE))
RMSE.ph2 <- sqrt(mean((Y2 - ph2pest) ^ 2, na.rm = TRUE))
RMSE.ph1
RMSE.ph2
getChart <- function(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset) {
##chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1, method = method, nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMX(Y1, bset, H = H1))
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, bset, FAP0 = FAP0, side = side), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1), ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
Yph1[, ii] <- tmp[1:length(chart1$Y)]
Yph2[, ii] <- tmp[(length(chart1$Y) + 1):length(tmp)]
}
}
ph1pest <- rep(NA, length(Y1))
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1))) {
ph1pest[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pest <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pest[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 6)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
RMSE.ph1 <- sqrt(mean((Y1 - ph1pest) ^ 2, na.rm = TRUE))
RMSE.ph2 <- sqrt(mean((Y2 - ph2pest) ^ 2, na.rm = TRUE))
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1,
RMSE.ph2)
}
return(out)
}
out <- rep(NA, 6 * 6)
out1 <- getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset1)
out1
bset1 <- list(
"method" = "MT",
"phimono" = 0,
"phiq" = 5,
"phiA" = diag(nrow = 5),
"phibound0" = Inf,
"phiboundqplus1" = 0,
"betaA" = diag(nrow = 1),
"gammaxi2" = 0.1,
"tautheta1" = 1,
"tautheta2" = 1,
"sigma2a" = 1,
"sigma2b" = 1,
"updatelambda2" = 1,
"lambda2alpha" = 1,
"lambda2beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"lowerbound" = 0,
"rounding" = 1,
"lambda2" = NULL,
"theta" = NULL
)
bset2 <- bset1
bset2$method <- "regression"
bset2$phimono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$phimono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$phimono <- 1
bset5 <- bset1
bset5$method <- "LASSO"
bset5$phimono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$phimono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
out <- rep(NA, 6 * 6)
out1 <- getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset1)
out2 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset2)
out3 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset3)
out4 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset4)
out5 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset5)
out6 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset6)
out <- c(out1, out2, out3, out4, out5, out6)
TP.app
FP.app
TP.app
getChart <- function(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset) {
##chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1, method = method, nsim = 300, by = 10, burnin = 3000 / 0.8 * 0.2), silent = TRUE)
chart1 <- try(BayesianLASSOMonitoring::GibbsRFLSMX(Y1, bset, H = H1))
chart2 <- try(BayesianLASSOMonitoring::Ph1MultipleTesting.Y01(chart1, bset, FAP0 = FAP0, side = side), silent = TRUE)
Yph1 <- matrix(NA, nrow = length(Y1), ncol = 10000)
Yph2 <- matrix(NA, nrow = length(Y2), ncol = 10000)
if (class(chart1)[1] != "try-error") {
tmpMu1 <- H1 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- H2 %*% (chart1$Gamma * chart1$Tau)
tmpMu2 <- rbind(tmpMu1, tmpMu2)
for (ii in 1:10000) {
tmpsel <- sample(1:300, 1)
tmp <- BayesianLASSOMonitoring::simYXph2(length(Y2), as.matrix(chart1$Y), as.matrix(chart1$Phi[, tmpsel]), as.matrix(tmpMu2[, tmpsel] + chart1$mu0[tmpsel]),
chart1$sigma2[tmpsel], chart1$theta[tmpsel], 1e-32,
1, 0, 1, as.matrix(chart1$Z[, tmpsel]))
Yph1[, ii] <- tmp[1:length(chart1$Y)]
Yph2[, ii] <- tmp[(length(chart1$Y) + 1):length(tmp)]
}
}
ph1pest <- rep(NA, length(Y1))
if ((class(chart1)[1] != "try-error")) {
for (ii in 1:(length(Y1))) {
ph1pest[ii] <- median(Yph1[ii, ], na.rm = TRUE)
}
}
ph2pest <- rep(NA, length(Y2))
if (class(chart1)[1] != "try-error") {
for (ii in 1:length(Y2)) {
ph2pest[ii] <- median(Yph2[ii, ], na.rm = TRUE)
}
}
out <- rep(NA, 6)
if ((class(chart1)[1] != "try-error") & (class(chart2)[1] != "try-error")) {
q <- dim(chart1$Phi)[1]
start.exact <- ceiling(TT1 * tt)
end <- ceiling(TT1 * tt)
TP.app <- sum(chart2$sig[start.exact:end], na.rm =TRUE)
FN.app <- sum(1 - chart2$sig[start.exact:end], na.rm =TRUE)
sensitivity.app <- TP.app / (TP.app + FN.app)
TN.app <- sum(1 - chart2$sig[-c(start.exact:end)], na.rm =TRUE)
FP.app <- sum(chart2$sig[-c(start.exact:end)], na.rm =TRUE)
specificity.app <- TN.app / (TN.app + FP.app)
ppv.app <- TP.app / (TP.app + FP.app)
sig <- chart2$grandsig
RMSE.ph1 <- sqrt(mean((Y1 - ph1pest) ^ 2, na.rm = TRUE))
RMSE.ph2 <- sqrt(mean((Y2 - ph2pest) ^ 2, na.rm = TRUE))
out <- c(sig,
sensitivity.app,
specificity.app,
ppv.app,
RMSE.ph1,
RMSE.ph2)
}
return(out)
}
simulation.wrap <- function(X, pars, alpha, lambda, pi, seed = 12345) {
cat("start at X:", X, "\n")
set.seed(seed + X)
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
#H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
#H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
#H1 <- H1[, seq(1, TT1 - q, 7)]
#H1 <- H1[, -c(colSums(H1) < 7)]
H2<- matrix(1, nrow = TT2, ncol = dim(H1)[2])
H2sim <- matrix(1, nrow = 5000, ncol = dim(H1)[2])
bset1 <- list(
"method" = "MT",
"phimono" = 0,
"phiq" = 5,
"phiA" = diag(nrow = 5),
"phibound0" = Inf,
"phiboundqplus1" = 0,
"betaA" = diag(nrow = 1),
"gammaxi2" = 0.1,
"tautheta1" = 1,
"tautheta2" = 1,
"sigma2a" = 1,
"sigma2b" = 1,
"updatelambda2" = 1,
"lambda2alpha" = 1,
"lambda2beta" = 1,
"updateYJ" = 1,
"leftcensoring" = 1,
"lowerbound" = 0,
"rounding" = 1,
"lambda2" = NULL,
"theta" = NULL
)
bset2 <- bset1
bset2$method <- "regression"
bset2$phimono <- 0
bset3 <- bset1
bset3$method <- "LASSO"
bset3$phimono <- 0
bset4 <- bset1
bset4$method <- "ALASSO"
bset4$phimono <- 1
bset5 <- bset1
bset5$method <- "LASSO"
bset5$phimono <- 1
bset6 <- bset1
bset6$method <- "ALASSO"
bset6$phimono <- 1
##ee <- BayesianLASSOMonitoring::GibbsRFLSMYJZ(Y1, H1)
#ww <- Ph1MultipleTesting.Y0tr(ee)
#X <- BayesianLASSOMonitoring::getXSeasonalityFS(TT1 + 5000, 3.5, 3)
#X1 <- X[1:TT1, ]
#X2 <- X[(TT1 + 1):(TT1 + TT2), ]
#X2sim <- X[(TT1 + 1):(TT1 + 5000), ]
out <- rep(NA, 6 * 6)
out1 <- getChart(Y1,  H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset1)
out2 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset2)
out3 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset3)
out4 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset4)
out5 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset5)
out6 <- getChart(Y1, H1, Y0,
side, FAP0,
Y2, H2, tt, TT1, bset6)
out <- c(out1, out2, out3, out4, out5, out6)
cat("Gibbs Done at X:", X, "\n")
tmp <- try(forecast::auto.arima(Y1), silent = TRUE)
if (class(tmp)[1] != "try-error") {
ph1 <- tmp$fitted
ph1[which(ph1 < 0)] <- 0
RMSE.ph1.arima <- sqrt(mean(((Y1 - ph1)^2)[-c(1:q)]))
ph2 <- forecast::forecast(tmp, h = length(Y2))$mean
ph2[which(ph2 < 0)] <- 0
RMSE.ph2.arima <- sqrt(mean((Y2 - ph2) ^ 2))
}
out <- c(out, RMSE.ph1.arima, RMSE.ph2.arima)
#tmpaddr <- paste('C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/sim', X, ".Rdat", sep = "")
#save(out, file = tmpaddr)
cat("end at X:", X, "\n")
return(out)
}
wrap <- function(X, pars, alpha, lambda, pi, seed = 12345) {
out <- try(simulation.wrap(X, pars, alpha, lambda, pi, seed), silent = TRUE)
return(out)
}
library(parallel)
seed <- 12345
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 100
TT1 <- c(92, 183)
#TT1 <- c(92)
TT2 <- 365
w <- c(1)
#w <- 7
q <- 5
delta <- c(0, 0.5, 1)
tt <- 0.8
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(FALSE)
sta <- c(FALSE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
pars <- pars[1:3, ]
tt <- dim(pars)[1]
#cl <- makeCluster(min(tt, ceiling(detectCores() * 0.875)), outfile = "C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/sim.log")
cl <- makeCluster(min(tt, ceiling(detectCores() * 0.875)))
clusterEvalQ(cl, library(BayesianLASSOMonitoring))
clusterEvalQ(cl, library(forecast))
clusterExport(cl, c("wrap", "simulation.wrap", "getChart"))
out <- parLapplyLB(cl, 1:tt, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#out <- parLapplyLB(cl, 1:4, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#out <- lapply(1:2, wrap, pars = pars, alpha = alpha, lambda = lambda, pi = pi, seed = seed)
#save(out, file = "C:/Users/yyao17/Box/2023 Summer/BayesianMonitoring/untitled folder/tmp1/out.Rdat")
closeAllConnections()
out
pars
