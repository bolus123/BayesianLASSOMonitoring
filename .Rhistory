pvalue <- rep(0, nn)
for (i in 1:nn) {
tmpkde <- ks::kde(tmp[i, ])
tmpp <- ks::pkde(0, tmpkde)
if (tail == "2-sided") {
pvalue[i] <- 2 * min(1 - tmpp, tmpp)
} else if (tail == "left-sided") {
pvalue[i] <- tmpp
} else if (tail == "right-sided") {
pvalue[i] <- 1 - tmpp
}
}
return(pvalue)
}
#' get the P value for RFLSM
#'
#' @param TauGamma is the distributions of shifts.
#' @param tail is type of the test.
getPvalueRFLSM <- function(TauGamma, tail = "2-sided") {
tmp <- TauGamma
nn <- dim(tmp)[1]
pvalue <- rep(0, nn)
for (i in 1:nn) {
if (tail == "2-sided") {
pvalue[i] <- 2 * min(1 - mean(tmp[i, ] <= 0), mean(tmp[i, ] <= 0))
} else if (tail == "left-sided") {
pvalue[i] <- mean(tmp[i, ] <= 0)
} else if (tail == "right-sided") {
pvalue[i] <- 1 - mean(tmp[i, ] <= 0)
}
}
return(pvalue)
}
#' get a vector of p values
#'
#' @param TauGamma is the distributions of shifts.
#' @param tail is type of the test.
#' @param method get p values with or without kernel smoothing.
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' getPvalue(result$Tau * result$Gamma)
getPvalue <- function(TauGamma, tail = "2-sided", method = "raw") {
if (method == "raw") {
pvalue <- getPvalueRFLSM(TauGamma, tail)
} else if (method == "ks") {
pvalue <- getPvalueKSRFLSM(TauGamma, tail)
}
pvalue
}
pval02 <- getPvalue(m0$Tau * m0$Gamma, method = "ks")
debug(getPvalueKSRFLSM)
pval02 <- getPvalue(m0$Tau * m0$Gamma, method = "ks")
debug(getPvalueKSRFLSM)
pval02 <- getPvalue(m0$Tau * m0$Gamma, method = "ks")
tmp
dim(tmp)
tmp[1, ]
ks::kde(tmp[1, ])
pval01 <- BayesianLassoMonitoring::getPvalue(m0$Tau * m0$Gamma)
pval02 <- BayesianLassoMonitoring::getPvalue(m0$Tau * m0$Gamma, method = "ks")
pval02
install.packages("fdrtool")
fdrtool
fdr
fdr
fdrtool::fdrtool(pval01, "pvalues")
fdrtool::fdrtool(pval01, "pvalue")
fdrtool::fdrtool(pval01, "pvalue")
fdrtool::fdrtool(pval02, "pvalue")
pval11 <- BayesianLassoMonitoring::getPvalue(m1$Tau * m1$Gamma)
fdrtool::fdrtool(pval11, "pvalue")
pval11
pval12 <- BayesianLassoMonitoring::getPvalue(m1$Tau * m1$Gamma, method = "ks")
pval12
fdrtool::fdrtool(pval11, "pvalue")
?pval11
?pval11
?fdrtool::fdrtool
fdrtool::pval.estimate.eta0(pval11)
?pval.estimate.eta0
fdrtool::pval.estimate.eta0(pval11, method = "bootstrap")
aa <- m1$Tau * m1$Gamma
dim(H)
aa[89, ]
hist(aa[89, ])
aa[89, ] < 0
mean(aa[89, ] < 0)
1 - mean(aa[89, ] < 0)
pval11
mean(aa[89, ] < 0)
mean(aa[89, ] > 0)
#' get the P value for RFLSM with kernel smoothing
#'
#' @param TauGamma is the distributions of shifts.
#' @param tail is type of the test.
getPvalueKSRFLSM <- function(TauGamma, tail = "2-sided") {
tmp <- TauGamma
nn <- dim(tmp)[1]
pvalue <- rep(0, nn)
for (i in 1:nn) {
tmpkde <- density(tmp[i, ])
rtmpdens <- spatstat.explore::CDF(tmpkde)
tmpp <- rtmpdens(0)
if (tail == "2-sided") {
pvalue[i] <- 2 * min(1 - tmpp, tmpp)
} else if (tail == "left-sided") {
pvalue[i] <- tmpp
} else if (tail == "right-sided") {
pvalue[i] <- 1 - tmpp
}
}
return(pvalue)
}
#' get the P value for RFLSM
#'
#' @param TauGamma is the distributions of shifts.
#' @param tail is type of the test.
getPvalueRFLSM <- function(TauGamma, tail = "2-sided") {
tmp <- TauGamma
nn <- dim(tmp)[1]
pvalue <- rep(0, nn)
for (i in 1:nn) {
if (tail == "2-sided") {
pvalue[i] <- mean(tmp[i, ] != 0)
} else if (tail == "left-sided") {
pvalue[i] <- mean(tmp[i, ] < 0)
} else if (tail == "right-sided") {
pvalue[i] <- mean(tmp[i, ] > 0)
}
}
return(pvalue)
}
#' get a vector of p values
#'
#' @param TauGamma is the distributions of shifts.
#' @param tail is type of the test.
#' @param method get p values with or without kernel smoothing.
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' getPvalue(result$Tau * result$Gamma)
getPvalue <- function(TauGamma, tail = "2-sided", method = "raw") {
if (method == "raw") {
pvalue <- getPvalueRFLSM(TauGamma, tail)
} else if (method == "ks") {
pvalue <- getPvalueKSRFLSM(TauGamma, tail)
}
pvalue
}
remove.packages("BayesianLassoMonitoring")
devtools::install_github("bolus123/BayesianLassoMonitoring")
devtools::install_github("bolus123/BayesianLassoMonitoring")
.seed(12345)
set.seed(12345)
H <- BayesianLassoMonitoring::getHMatMT(183, 3)
Y0 <- arima.sim(list(ar = 0.5), 183)
m0 <- BayesianLassoMonitoring::GibbsRFLSM(Y0, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
3000, 1, 1000, 1e-6, H)
pval01 <- BayesianLassoMonitoring::getPvalue(m0$Tau * m0$Gamma)
fdrtool::fdrtool(pval01, "pvalue")
pval01
pval02 <- BayesianLassoMonitoring::getPvalue(m0$Tau * m0$Gamma, method = "ks")
fdrtool::fdrtool(pval02, "pvalue")
pval01
fdrtool::fdrtool(pval01, "pvalue")
Y1 <- Y0
Y1[92:183] <- Y1[92:183] + 5
m1 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
3000, 1, 1000, 1e-6, H)
pval11 <- BayesianLassoMonitoring::getPvalue(m1$Tau * m1$Gamma)
fdrtool::fdrtool(pval11, "pvalue")
m0
pval01
rowMeans(m0$Tau == 0)
rowMeans(m1$Tau == 0)
fdrtool::fdrtool(rowMeans(m0$Tau == 0), "pvalue")
fdrtool::fdrtool(rowMeans(m1$Tau == 0), "pvalue")
?fdrtool::fdrtool
FDRestimation::p.fdr(rowMeans(m1$Tau == 0))
?FDRestimation::p.fdr
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), estim.method = "last.hist")
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), estim.method = "meinshausen")
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), estim.method = "storey")
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), estim.method = "storey", threshold = 0.2)
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), estim.method = "last.hist", threshold = 0.2)
?fdrtool::fdrtool
fdrtool::fdrtool(rowMeans(m1$Tau == 0), "pvalue")
m1 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6, H)
fdrtool::fdrtool(rowMeans(m1$Tau == 0), "pvalue")
FDRestimation::p.fdr(rowMeans(m1$Tau == 0))
FDRestimation::p.fdr(rowMeans(m1$Tau == 0), threshold = 0.2)
colSums(m1$Tau)
colSums(m1$Tau) == 0
sum(colSums(m1$Tau) == 0)
sum(colSums(m0$Tau) == 0)
mean(colSums(m0$Tau) == 0)
mean(colSums(m0$Tau) == 0) /  mean(colSums(m0$Tau) == 1)
mean(colSums(m1$Tau) == 0) /  mean(colSums(m1$Tau) == 1)
BayesianLassoMonitoring::ll(Y, m0$Phi, m0$Mu, m0$sigma2)
BayesianLassoMonitoring::ll(Y0, m0$Phi, m0$Mu, m0$sigma2)
aa <- BayesianLassoMonitoring::ll(Y0, m0$Phi, m0$Mu, m0$sigma2)
aa
aa
m0 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6)
m0
aa <- BayesianLassoMonitoring::ll(Y1, m0$Phi, m0$Mu, m0$sigma2)
aa
aa
dim(aaa)
dim(aa)
aa[, 1]
bb <- BayesianLassoMonitoring::ll(Y1, m1$Phi, m1$Mu, m1$sigma2)
bb
bb[, 1]
bb[, 2]
bb[, 3]
aa[, 3]
sum(aa[, 3]) / sum(bb[, 3])
sum(aa[, 3]) / sum(bb[, 4])
sum(aa[, 3]) / sum(bb[, 5])
sum(aa[, 3]) - sum(bb[, 5])
exp(a[, 3])
exp(aa[, 3])
exp(aa[, 3]) / exp(bb[, 3])
log(exp(aa[, 3]) / exp(bb[, 3]))
sum(log(exp(aa[, 3]) / exp(bb[, 3])))
exp(sum(log(exp(aa[, 3]) / exp(bb[, 3]))))
exp(sum(log(exp(aa[, 3]) / exp(bb[, 7]))))
exp(sum(log(exp(aa[, 3]) / exp(bb[, 10]))))
exp(sum(log(exp(aa[, 3]) / exp(bb[, 90]))))
aa[, 3]
sum(aa[, 3])
sum(aa[, 3]) - sum(bb[, 3])
exp(sum(aa[, 3]) - sum(bb[, 3]))
?log
log10(exp(sum(aa[, 3]) - sum(bb[, 3])))
mean(colSums(m1$Tau) == 0) /  mean(colSums(m1$Tau) == 1)
mean(colSums(m1$Tau) == 0) /  mean(colSums(m1$Tau) == 1)
colSums(m1$Tau)
mean(colSums(m1$Tau) == 0) /  mean(colSums(m1$Tau) > 1)
mean(colSums(m1$Tau) > 1)
mean(colSums(m1$Tau) == 0) /  mean(colSums(m1$Tau) >= 1)
mean(colSums(m1$Tau) == 0)
mean(colSums(m1$Tau) > 1)
mean(colSums(m1$Tau) >= 1)
set.seed(12345)
H <- BayesianLassoMonitoring::getHMatMT(183, 3)
Y0 <- arima.sim(list(ar = 0.5), 183)
m0 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6)
set.seed(12345)
H <- BayesianLassoMonitoring::getHMatMT(183, 3)
Y0 <- arima.sim(list(ar = 0.5), 183)
#m0 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
#                                          0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
#                                          5000, 1, 1000, 1e-6)
#
#
#pval01 <- BayesianLassoMonitoring::getPvalue(m0$Tau * m0$Gamma)
#fdrtool::fdrtool(pval01, "pvalue")
#fdrtool::fdrtool(rowMeans(m1$Tau == 0), "pvalue")
Y1 <- Y0
Y1[92:183] <- Y1[92:183] + 5
m1 <- BayesianLassoMonitoring::GibbsRFLSM(Y1, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6, H)
rowMeans(m1$Tau)
Y1
plot(Y1)
rowMeans(m1$Tau)
plot(rowMeans(m1$Tau))
plot(rowMeans(m1$Tau == 0))
plot(rowMeans(m1$Tau == 0), type = 'l')
rowMeans(m1$Tau == 0)
fdrtool::fdrtool(rowMeans(m1$Tau == 0), "pvalue")
FDRestimation::p.fdr(rowMeans(m1$Tau == 0))
rowMeans(m1$Tau == 0)
rowMeans(m1$Tau)
colSums(m1$Tau)
colSums(m1$Tau) == 0
mean(colSums(m1$Tau) == 0)
m0 <- BayesianLassoMonitoring::GibbsRFLSM(Y0, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6, H)
m0$Tau
colSums(m0$Tau) == 0
mean(colSums(m0$Tau) == 0)
H1 <- cbind(BayesianLassoMonitoring::getHMatIsolated(183, 3, 1), BayesianLassoMonitoring::getHMatSustained(183, 3, 1))
m01 <- BayesianLassoMonitoring::GibbsRFLSM(Y0, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6, H1)
m01$Tau
mean(colSums(m01$Tau) == 0)
colMeans(m01$Tau)
plot(colMeans(m01$Tau))
plot(colMeans(m01$Tau = 0))
plot(colMeans(m01$Tau == 0))
plot(rowMeans(m01$Tau == 0))
H2 <- cbind(BayesianLassoMonitoring::getHMatIsolated(183, 3, 7), BayesianLassoMonitoring::getHMatSustained(183, 3, 7))
m02 <- BayesianLassoMonitoring::GibbsRFLSM(Y0, 3, diag(nrow = 3), 0.1, 0.1,
0.1, 0.1, 1, 1, 0.1, "MonoALASSO", Inf, 0,
5000, 1, 1000, 1e-6, H2)
plot(rowMeans(m02$Tau == 0))
rowMeans(colSums(m02$Tau) == 0)
colSums(m02$Tau)
colSums(m02$Tau) == 0
mean(colSums(m02$Tau) == 0)
mean(m02$Tau * m02$Gamma) / sd(m02$Tau * m02$Gamma)
rowMeans(m02$Tau * m02$Gamma) / sqrt(diag(var(m02$Tau * m02$Gamma)))
var(m02$Tau * m02$Gamma)
dim(var(m02$Tau * m02$Gamma))
rowMeans(m02$Tau * m02$Gamma) / sqrt(diag(var(t(m02$Tau * m02$Gamma))))
rowMeans(m01$Tau * m01$Gamma) / sqrt(diag(var(t(m01$Tau * m01$Gamma))))
min(rowMeans(m01$Tau * m01$Gamma) / sqrt(diag(var(t(m01$Tau * m01$Gamma)))))
max(rowMeans(m01$Tau * m01$Gamma) / sqrt(diag(var(t(m01$Tau * m01$Gamma)))))
max(rowMeans(m1$Tau * m1$Gamma) / sqrt(diag(var(t(m1$Tau * m1$Gamma)))))
rowMeans(m1$Tau * m1$Gamma) / sqrt(diag(var(t(m1$Tau * m1$Gamma))))
BayesianLassoMonitoring::getHMatIsolated(183, 3, 7)
BayesianLassoMonitoring::getHMatSustained(183, 3, 7)
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
getHMatSustained(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
getHMatSustained(20, 3, 3)
getHMatIsolated(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
getHMatSustained(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
getHMatSustained(20, 3, 3)
getHMatIsolated(20, 3, 3)
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
getHMatIsolated(20, 3, 3)
getHMatSustained(20, 3, 3)
10 - 2 - 3 + 1 - 3 - 3
getHMatSustained(20, 3, 3)
20 - 2 - 3 + 1 - 3 - 3
Rcpp::sourceCpp("src/BayesianLassoMonitoring.cpp")
20 - 2 - 3 + 1 - 3 - 3
getHMatSustained(20, 3, 3)
getHMatIsolated(20, 3, 3)
1 - (1 - 0.1) ^ (1/(180-1))
m0
RMSE(Y1, m0$Phi, m0$Mu)
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' RMSE(Y, result$Phi, result$Mu)
RMSE <- function(Y, Phi, Mu) {
T <- length(Y)
q <- dim(Phi)[1]
nsim <- dim(Phi)[2]
ee <- matrix(NA, nrow = T - q, ncol = nsim)
rmse <- rep(0, nsim)
for (ii in seq(nsim)) {
V <- matrix(Y, ncol = 1) - Mu[, ii]
Vas <- getV(V, q)
V <- V[-c(1:q)]
Vas <- Vas[-c(1:q), ]
ee[, ii] <- V - Vas %*% Phi[, ii]
rmse[ii] <- sqrt(sum(ee[, ii] ^ 2))
}
rmse
}
RMSE(Y1, m0$Phi, m0$Mu)
length(RMSE(Y1, m0$Phi, m0$Mu))
bb <- RMSE(Y1, m0$Phi, m0$Mu)
bb <- RMSE(Y1, m0$Phi, m0$Mu)
bb <- RMSE(Y1, m0$Phi, m0$muq)
bb
m0$muq[, 1]
m0$muq[, 2]
m0$muq
class(m0$muq)
m0$muq[, 2]
aa <- RMSE(Y, m0$Phi, m0$Mu)
aa <- RMSE(Y1, m0$Phi, m0$Mu)
bb <- RMSE(Y1, m0$Phi, m0$muq)
aa
bb
aa - bb
hist(aa - bb)
hist(aa - bb)
mean((aa - bb) > 0)
mean((aa - bb) < 0)
aa - bb
bb - aa
median(aa)
median(bb)
(bb - aa)
(bb - aa) / m0$sigma2
(bb - aa) / m0$sigma2
m0$sigma2
dim(m0$sigma2)
(bb - aa) / m0$sigma2
cc <- (bb - aa) / sqrt(m0$sigma2)
cc
hist(cc)
hist(aa)
hist(bb)
median(cc)
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' RMSE(Y, result$Phi, result$Mu)
RMSE <- function(Y, Phi, Mu) {
T <- length(Y)
q <- dim(Phi)[1]
nsim <- dim(Phi)[2]
ee <- matrix(NA, nrow = T - q, ncol = nsim)
rmse <- rep(0, nsim)
for (ii in seq(nsim)) {
V <- matrix(Y, ncol = 1) - Mu[, ii]
Vas <- getV(V, q)
V <- V[-c(1:q)]
Vas <- Vas[-c(1:q), ]
ee[, ii] <- V - Vas %*% Phi[, ii]
rmse[ii] <- sqrt(sum(ee[, ii] ^ 2) / (T - q))
}
rmse
}
#' obtain the root squared error
#'
#' @param Y is a vector
#' @param Phi is the coefficient
#' @param Mu is the mean
#' @export
#' @examples
#' T <- 100
#' q <- 5
#' H <- getHMatMT(T, q)
#' Y <- arima.sim(list(ar = 0.5), n = T)
#'
#' result <- GibbsRFLSM(Y, q, diag(nrow = q), 0.1, 0.1, 0.1, 0.1,
#' 1, 1, 0.1, "MonoALASSO", Inf, 0, 1000, 1, 100, 1e-10, H)
#'
#' RSS(Y, result$Phi, result$Mu)
RSS <- function(Y, Phi, Mu) {
T <- length(Y)
q <- dim(Phi)[1]
nsim <- dim(Phi)[2]
ee <- matrix(NA, nrow = T - q, ncol = nsim)
rss <- rep(0, nsim)
for (ii in seq(nsim)) {
V <- matrix(Y, ncol = 1) - Mu[, ii]
Vas <- getV(V, q)
V <- V[-c(1:q)]
Vas <- Vas[-c(1:q), ]
ee[, ii] <- V - Vas %*% Phi[, ii]
rss[ii] <- sum(ee[, ii] ^ 2)
}
rss
}
rss1 <- RSS(Y1, m0$Phi, m0$Mu)
rss0 <- RSS(Y1, m0$Phi, m0$muq)
drss <- (rss0 - rss1) / m0$sigma2
drss
hist(drss)
View(getV)
rss1 <- RSS(Y0, m0$Phi, m0$Mu)
rss0 <- RSS(Y0, m0$Phi, m0$muq)
drss <- (rss0 - rss1) / m0$sigma2
hist(drss)
library(BayesianLassoMonitoring)
detach("package:BayesianLassoMonitoring", unload = TRUE)
remove.packages("BayesianLassoMonitoring")
devtools::install_github("bolus123/BayesianLassoMonitoring")
