nnsim <- 100
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(TRUE)
sta <- c(TRUE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
pars
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(TRUE)
sta <- c(TRUE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
pars
X <- 2
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MT",
const = 1, nsim.chart = 10000,
Y.hat.method = Y.hat.method, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
nsim.resample <- 3 * 1 / (0.2/178)
tmpsel <- sample(1:1000, nsim.resample, replace = TRUE)
Gamma.resample <- chart1$model$Gamma[, tmpsel]
Tau.resample <- chart1$model$Tau[, tmpsel]
bb <- chart1$model$H %*% (Gamma.resample * Tau.resample)
bb
boxplot(t(bb))
BayesianLASSOMonitoring::RMSE.ph1
RMSE.ph1 <- function(Ph1BayesianLASSO.model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = FALSE) {
nsim <- dim(Ph1BayesianLASSO.model$Phi)[2]
q <- dim(Ph1BayesianLASSO.model$Phi)[1]
TT <- length(Ph1BayesianLASSO.model$Y.tr)
tmpfit.tr <- rep(NA, TT)
tmpfit.ma <- rep(NA, TT)
tmpresi.tr <- rep(NA, TT)
tmpresi.ma <- rep(NA, TT)
RMSE.tr <- rep(NA, nsim)
RMSE.ma <- rep(NA, nsim)
Y.tr <- Ph1BayesianLASSO.model$Y.tr
Y.ma <- Ph1BayesianLASSO.model$Y.ma
meanY <- Ph1BayesianLASSO.model$meanY
sdY <- Ph1BayesianLASSO.model$sdY
X <- Ph1BayesianLASSO.model$X
H <- Ph1BayesianLASSO.model$H
resi.tr <- matrix(NA, nrow = TT - q, ncol = nsim)
resi.ma <- matrix(NA, nrow = TT - q, ncol = nsim)
for (j in 1:nsim) {
tmpmuq <- Ph1BayesianLASSO.model$muq[j]
tmpPhi <- Ph1BayesianLASSO.model$Phi[, j]
tmpV <- Y.tr - tmpmuq
if (!is.null(X)) {
tmpBeta <- Ph1BayesianLASSO.model$Beta[, j]
tmpKappa <- Ph1BayesianLASSO.model$Kappa[, j]
tmpV <- tmpV - X %*% (tmpBeta * tmpKappa)
}
if ((!is.null(H)) & (H0 == FALSE)) {
tmpGamma <- Ph1BayesianLASSO.model$Gamma[, j]
tmpTau <- Ph1BayesianLASSO.model$Tau[, j]
tmpV <- tmpV - H %*% (tmpGamma * tmpTau)
}
for (i in (q + 1):TT) {
tmpfit.tr[i] <- tmpmuq + tmpV[(i - 1):(i - q)] %*% tmpPhi
if (!is.null(X)) {
tmpfit.tr[i] <- tmpfit.tr[i] + X[i, ] %*% (tmpBeta * tmpKappa)
}
if ((!is.null(H)) & (H0 == FALSE)) {
tmpfit.tr[i] <- tmpfit.tr[i] + H[i, ] %*% (tmpGamma * tmpTau)
}
tmpresi.tr[i] <- Y.tr[i] - tmpfit.tr[i]
tmpfit.ma[i] <- backtrans(tmpfit.tr[i], log, const, sta, meanY, sdY)
tmpfit.ma[i] <- ifelse(tmpfit.ma[i] < lowerbound, lowerbound, tmpfit.ma[i])
tmpresi.ma[i] <- Y.ma[i] - tmpfit.ma[i]
}
tmpresi.tr <- tmpresi.tr[(q + 1):TT]
resi.tr[, j] <- tmpresi.tr
RMSE.tr[j] <- sqrt(t(tmpresi.tr) %*% tmpresi.tr / (TT - q))
tmpresi.ma <- tmpresi.ma[(q + 1):TT]
resi.ma[, j] <- tmpresi.ma
RMSE.ma[j] <- sqrt(t(tmpresi.ma) %*% tmpresi.ma / (TT - q))
}
list("RMSE.tr" = RMSE.tr, "RMSE.ma" = RMSE.ma, "resi.tr" = resi.tr, "resi.ma" = resi.ma)
}
ee <- RMSE.ph1(chart1$model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = FALSE)
library(BayesianLASSOMonitoring)
ee <- RMSE.ph1(chart1$model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = FALSE)
ee
ee0 <- RMSE.ph1(chart1$model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = TRUE)
ee0
plot(ee)
boxplot(t(ee))
ee
boxplot(t(ee$resi.tr))
boxplot(t(ee0$resi.tr))
quantile(ee0[1, ], 0.95)
quantile(ee0$resi.tr[1, ], 0.95)
mean(ee$resi.tr[1, ] > 0.1851276)
mean(ee$resi.tr[2, ] > quantile(ee0$resi.tr[2, ], 0.95))
mean(ee$resi.tr[3, ] > quantile(ee0$resi.tr[3, ], 0.95))
mean(ee$resi.tr[100, ] > quantile(ee0$resi.tr[100, ], 0.95))
mean(ee$resi.tr[105, ] > quantile(ee0$resi.tr[105, ], 0.95))
mean(ee$resi.tr[80, ] > quantile(ee0$resi.tr[80, ], 0.95))
ks.test(ee$resi.tr[80, ], ee0$resi.tr[80, ])
ks.test(ee$resi.tr[100, ], ee0$resi.tr[100, ])
?ks.test
ks.test(ee$resi.tr[100, ], ee0$resi.tr[100, ], "less")
ks.test(ee$resi.tr[100, ], ee0$resi.tr[100, ], alternative = "less")
ks.test(ee$resi.tr[107, ], ee0$resi.tr[107, ], alternative = "less")
ks.test(ee$resi.tr[5, ], ee0$resi.tr[5, ], alternative = "less")
ks.test(ee$resi.tr[30, ], ee0$resi.tr[30, ], alternative = "less")
ks.test(ee$resi.tr[90, ], ee0$resi.tr[90, ], alternative = "less")
ks.test(ee$resi.tr[90, ] / sqrt(chart1$model$sigma2), ee0$resi.tr[90, ] / sqrt(chart1$model$sigma2), alternative = "less")
dim(ee$RMSE.tr)
dim(ee$resi.tr)
ff0 <- ee$resi.tr
ff1 <- ee$resi.tr
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
}
boxplot(t(ff0))
boxplot(t(ff1))
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
}
boxplot(t(ff0))
boxplot(t(ff1))
ff0[i, ]
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
test <- rep(NA, 178)
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
test[i] <- mean((ff0[i, ]) ^ 2) - mean((ff1[i, ]) ^ 2)
}
test
plot(test)
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
test <- rep(NA, 178)
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
test[i] <- mean(exp((ff0[i, ]) ^ 2)) / mean(exp((ff1[i, ]) ^ 2))
}
test
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
test <- rep(NA, 178)
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
test[i] <- log(mean(exp((ff0[i, ]) ^ 2)) / mean(exp((ff1[i, ]) ^ 2)))
}
plot(test)
pi
dnorm(ff0[i, ], 0, 1)
mean(dnorm(ff0[i, ], 0, 1))
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
test <- rep(NA, 178)
for (i in 1:178) {
ff0[i, ] <- ff0[i, ] / sqrt(chart1$model$sigma2)
ff1[i, ] <- ff1[i, ] / sqrt(chart1$model$sigma2)
test[i] <- log(mean(dnorm(ff0[i, ], 0, 1))) - log(mean(dnorm(ff1[i, ], 0, 1)))
}
test
plot(test)
ff0 <- ee0$resi.tr
ff1 <- ee$resi.tr
test <- rep(NA, 178)
for (i in 1:178) {
test[i] <- log(mean(dnorm(ff0[i, ], 0, sqrt(chart1$model$sigma2)))) - log(mean(dnorm(ff1[i, ], 0, sqrt(chart1$model$sigma2))))
}
test
plot(test)
chart1$model$Gamma
chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau)
chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau)
aa <-chart1$model$H %*% (chart1$model$Gamma * chart1$model$Tau)
aa
aa[-c(1:5), ]
aa <- aa[-c(1:5), ]
sdaa <- rep(NA, 178)
for (i in 1:178) {
sdaa[i] <- sd(aa[i, ])
}
aa / sdaa
plot(aa/sdaa)
plot(rowMeans(aa)/sdaa)
RMSE.ph1 <- function(Ph1BayesianLASSO.model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = FALSE) {
nsim <- dim(Ph1BayesianLASSO.model$Phi)[2]
q <- dim(Ph1BayesianLASSO.model$Phi)[1]
TT <- length(Ph1BayesianLASSO.model$Y.tr)
tmpfit.tr <- rep(NA, TT)
tmpfit.ma <- rep(NA, TT)
tmpresi.tr <- rep(NA, TT)
tmpresi.ma <- rep(NA, TT)
RMSE.tr <- rep(NA, nsim)
RMSE.ma <- rep(NA, nsim)
Y.tr <- Ph1BayesianLASSO.model$Y.tr
Y.ma <- Ph1BayesianLASSO.model$Y.ma
meanY <- Ph1BayesianLASSO.model$meanY
sdY <- Ph1BayesianLASSO.model$sdY
X <- Ph1BayesianLASSO.model$X
H <- Ph1BayesianLASSO.model$H
resi.tr <- matrix(NA, nrow = TT - q, ncol = nsim)
resi.ma <- matrix(NA, nrow = TT - q, ncol = nsim)
fit.tr <- matrix(NA, nrow = TT - q, ncol = nsim)
fit.ma <- matrix(NA, nrow = TT - q, ncol = nsim)
for (j in 1:nsim) {
tmpmuq <- Ph1BayesianLASSO.model$muq[j]
tmpPhi <- Ph1BayesianLASSO.model$Phi[, j]
tmpV <- Y.tr - tmpmuq
if (!is.null(X)) {
tmpBeta <- Ph1BayesianLASSO.model$Beta[, j]
tmpKappa <- Ph1BayesianLASSO.model$Kappa[, j]
tmpV <- tmpV - X %*% (tmpBeta * tmpKappa)
}
if ((!is.null(H)) & (H0 == FALSE)) {
tmpGamma <- Ph1BayesianLASSO.model$Gamma[, j]
tmpTau <- Ph1BayesianLASSO.model$Tau[, j]
tmpV <- tmpV - H %*% (tmpGamma * tmpTau)
}
for (i in (q + 1):TT) {
tmpfit.tr[i] <- tmpmuq + tmpV[(i - 1):(i - q)] %*% tmpPhi
if (!is.null(X)) {
tmpfit.tr[i] <- tmpfit.tr[i] + X[i, ] %*% (tmpBeta * tmpKappa)
}
if ((!is.null(H)) & (H0 == FALSE)) {
tmpfit.tr[i] <- tmpfit.tr[i] + H[i, ] %*% (tmpGamma * tmpTau)
}
tmpresi.tr[i] <- Y.tr[i] - tmpfit.tr[i]
tmpfit.ma[i] <- backtrans(tmpfit.tr[i], log, const, sta, meanY, sdY)
tmpfit.ma[i] <- ifelse(tmpfit.ma[i] < lowerbound, lowerbound, tmpfit.ma[i])
tmpresi.ma[i] <- Y.ma[i] - tmpfit.ma[i]
}
fit.tr[, j] <- tmpfit.tr[(q + 1):TT]
fit.ma[, j] <- tmpfit.ma[(q + 1):TT]
tmpresi.tr <- tmpresi.tr[(q + 1):TT]
resi.tr[, j] <- tmpresi.tr
RMSE.tr[j] <- sqrt(t(tmpresi.tr) %*% tmpresi.tr / (TT - q))
tmpresi.ma <- tmpresi.ma[(q + 1):TT]
resi.ma[, j] <- tmpresi.ma
RMSE.ma[j] <- sqrt(t(tmpresi.ma) %*% tmpresi.ma / (TT - q))
}
list("RMSE.tr" = RMSE.tr, "RMSE.ma" = RMSE.ma, "fit.tr" = fit.tr, "fit.ma" = fit.ma, "resi.tr" = resi.tr, "resi.ma" = resi.ma)
}
ee <- RMSE.ph1(chart1$model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = FALSE)
ee0 <- RMSE.ph1(chart1$model, log = TRUE, const = 1, sta = TRUE, lowerbound = 0, H0 = TRUE)
ee
ee$fit.tr
ee$fit.ma
m0 <- rep(NA, 178)
m1 <- rep(NA, 178)
for (i in 1:178) {
m0[i] <- median(ee0$fit.tr[i, ])
m1[i] <- median(ee$fit.tr[i, ])
}
m0
plot(m0)
plot(m1)
plot(chart1$model$Y.tr)
points(6:183, m0, col = 'red')
points(6:183, m1, col = 'blue')
m1 - m9
m1 - m0
m0
m0
m1
m1 - m0
plot(m1 - m0)
mean(m1 - m0)
sd(m1 - m0)
mean(m1 - m0) / sd(m1 - m0)
(m1 - m0) / sd(m1 - m0)
plot((m1 - m0) / sd(m1 - m0))
rowMeans(ee0$fit.tr)
rowMeans(ee0$fit.tr) - rowMeans(ee$fit.tr)
bb <- rowMeans(ee0$fit.tr) - rowMeans(ee$fit.tr)
bb
bb / sd(bb)
plot(bb / sd(bb))
qnorm(0.001)
qnorm(0.0005)
rowMeans(ee0$fit.tr)
plot(rowMeans(ee0$fit.tr))
points(rowMeans(ee$fit.tr))
points(rowMeans(ee$fit.tr), 'red')
points(rowMeans(ee$fit.tr), col = 'red')
?BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1
sim.ph1 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(1000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2,
H = chart1$model$H, Gamma = chart1$model$Gamma, Tau = chart1$model$Tau)
sim.ph1
sim.ph1$fit
sim.ph1
sim.ph1$fit
sim.ph1.H0 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(1000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2)
sim.ph1.H1 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(1000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2,
H = chart1$model$H, Gamma = chart1$model$Gamma, Tau = chart1$model$Tau)
sim.ph1.H0
rowMeans(sim.ph1.H0$fit)
aa <- rowMeans(sim.ph1.H0$fit)
bb <- rowMeans(sim.ph1.H1$fit)
aa
bb
aa - bb
plot(aa - bb)
plot((aa - bb) / sd(aa - bb))
sim.ph1.H0$Y.tr
dim(sim.ph1.H0$Y.tr)
aa
bb <- rowMeans(sim.ph1.H0$fit)
bb <- rowMeans(sim.ph1.H0$fit)
bb
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
aa
aa[, i]
bb
aa
plot(aa[, 1])
plot(aa[, 2])
plot(aa[, 3])
plot(aa[, 4])
plot(aa[, 5])
plot(aa[, 6])
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.95)))
}
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.95)))
}
cc
chart1$model$Y.tr - bb
plot(chart1$model$Y.tr - bb)
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red')
points(cc[, 2], col = 'red', type = 'l')
alpha <- c(0.03083069, 0.06242601, 0.09120189)
lambda <- 0.239385
pi <- 0.1453097
nnsim <- 1
TT1 <- c(183)
TT2 <- 365
w <- c(14)
#w <- 7
q <- 5
delta <- c(0, 1)
tt <- 0.5
Y.hat.method <- c("median")
side <- "right-sided"
FAP0 <- 0.2
log <- c(TRUE)
sta <- c(TRUE)
pars <- expand.grid(TT1, TT2, w, q, delta, tt, Y.hat.method, side, FAP0, log, sta, 1:nnsim)
X <- 1
TT1 <- pars[X, 1]
TT2 <- pars[X, 2]
w <- pars[X, 3]
q <- pars[X, 4]
delta <- pars[X, 5]
tt <- pars[X, 6]
Y.hat.method <- as.character(pars[X, 7])
side <- as.character(pars[X, 8])
FAP0 <- pars[X, 9]
log <- pars[X, 10]
sta <- pars[X, 11]
Y <- BayesianLASSOMonitoring::rzinpoisinar3(TT1 + TT2 + w - 1, alpha, lambda, pi,
ceiling(TT1 * tt) + w - 1, delta = delta, burnin = 100)
Y0 <- Y[1:(w - 1)]
Y1 <- Y[w:(TT1 + w - 1)]
Y2 <- Y[(TT1 + w):(TT1 + TT2 + w - 1)]
H1 <- BayesianLASSOMonitoring::getHMatMT(TT1, q)
H2 <- matrix(1, nrow = TT2, ncol = TT1 - q)
H2sim <- matrix(1, nrow = 5000, ncol = TT1 - q)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MT",
const = 1, nsim.chart = 10000,
Y.hat.method = Y.hat.method, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
sim.ph1.H0 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(1000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2)
sim.ph1.H1 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(1000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2,
H = chart1$model$H, Gamma = chart1$model$Gamma, Tau = chart1$model$Tau)
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.95)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.99)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.999)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
0.2/178
1 - 0.2/178
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.9988764)))
}
sim.ph1.H0 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(10000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2)
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.9988764)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
10000 * 0.2/178
sim.ph1.H0 <- BayesianLASSOMonitoring::GibbsRFLSM.sim.ph1(100000, chart1$model$Y.tr, chart1$model$Phi, chart1$model$muq, chart1$model$sigma2)
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.9988764)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
sim.ph1.H0$Y.tr
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(sim.ph1.H0$Y.tr[i, ], c(0.9988764)))
}
plot(chart1$model$Y.tr[6:183])
points(cc[, 2], col = 'red', type = 'l')
bb <- rowMeans(sim.ph1.H0$fit)
aa <- matrix(NA, nrow = 178, ncol = 1000)
cc <- matrix(NA, nrow = 178, ncol = 2)
for (i in 1:1000) {
aa[, i] <- sim.ph1.H0$Y.tr[, i] - bb
}
for (i in 1:178) {
cc[i, ] <- c(NA, quantile(aa[i, ], c(0.9988764)))
}
plot(chart1$model$Y.tr[6:183] - bb)
points(cc[, 2], col = 'red', type = 'l')
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MT",
const = 1, nsim.chart = 10000,
Y.hat.method = Y.hat.method, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
chart1 <- try(BayesianLASSOMonitoring::Ph1BayesianLASSO(Y1, w, H1, NULL, Y0 = Y0, method = "MonoALASSO",
const = 1, nsim.chart = 100000,
Y.hat.method = Y.hat.method, side = side, FAP0 = FAP0,
log = log, sta = sta, plot = TRUE), silent = TRUE)
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
devtools::install_github("bolus123/BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
remove.packages("BayesianLASSOMonitoring")
