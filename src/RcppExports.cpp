// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// getV
arma::mat getV(arma::vec V, int p);
RcppExport SEXP _BayesianMonitoring1_getV(SEXP VSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type V(VSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(getV(V, p));
    return rcpp_result_gen;
END_RCPP
}
// IsolatedShift
arma::mat IsolatedShift(int T);
RcppExport SEXP _BayesianMonitoring1_IsolatedShift(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(IsolatedShift(T));
    return rcpp_result_gen;
END_RCPP
}
// SustainedShift
arma::mat SustainedShift(int T);
RcppExport SEXP _BayesianMonitoring1_SustainedShift(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(SustainedShift(T));
    return rcpp_result_gen;
END_RCPP
}
// GradualShift
arma::mat GradualShift(int T);
RcppExport SEXP _BayesianMonitoring1_GradualShift(SEXP TSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type T(TSEXP);
    rcpp_result_gen = Rcpp::wrap(GradualShift(T));
    return rcpp_result_gen;
END_RCPP
}
// getPosterior
Rcpp::List getPosterior(arma::vec Y, arma::mat V, arma::mat X, double lambda2, arma::vec beta0, arma::vec beta1, arma::vec beta2, int burnin, int nsim);
RcppExport SEXP _BayesianMonitoring1_getPosterior(SEXP YSEXP, SEXP VSEXP, SEXP XSEXP, SEXP lambda2SEXP, SEXP beta0SEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP burninSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    rcpp_result_gen = Rcpp::wrap(getPosterior(Y, V, X, lambda2, beta0, beta1, beta2, burnin, nsim));
    return rcpp_result_gen;
END_RCPP
}
// getPosteriorH0
Rcpp::List getPosteriorH0(arma::vec Y, arma::mat V, double lambda2, arma::vec beta0, arma::vec beta1, int burnin, int nsim);
RcppExport SEXP _BayesianMonitoring1_getPosteriorH0(SEXP YSEXP, SEXP VSEXP, SEXP lambda2SEXP, SEXP beta0SEXP, SEXP beta1SEXP, SEXP burninSEXP, SEXP nsimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type V(VSEXP);
    Rcpp::traits::input_parameter< double >::type lambda2(lambda2SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    rcpp_result_gen = Rcpp::wrap(getPosteriorH0(Y, V, lambda2, beta0, beta1, burnin, nsim));
    return rcpp_result_gen;
END_RCPP
}
// BenjaminiHochberg
arma::mat BenjaminiHochberg(double FDR, arma::mat beta2, Rcpp::String side);
RcppExport SEXP _BayesianMonitoring1_BenjaminiHochberg(SEXP FDRSEXP, SEXP beta2SEXP, SEXP sideSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type FDR(FDRSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type side(sideSEXP);
    rcpp_result_gen = Rcpp::wrap(BenjaminiHochberg(FDR, beta2, side));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_BayesianMonitoring1_getV", (DL_FUNC) &_BayesianMonitoring1_getV, 2},
    {"_BayesianMonitoring1_IsolatedShift", (DL_FUNC) &_BayesianMonitoring1_IsolatedShift, 1},
    {"_BayesianMonitoring1_SustainedShift", (DL_FUNC) &_BayesianMonitoring1_SustainedShift, 1},
    {"_BayesianMonitoring1_GradualShift", (DL_FUNC) &_BayesianMonitoring1_GradualShift, 1},
    {"_BayesianMonitoring1_getPosterior", (DL_FUNC) &_BayesianMonitoring1_getPosterior, 9},
    {"_BayesianMonitoring1_getPosteriorH0", (DL_FUNC) &_BayesianMonitoring1_getPosteriorH0, 7},
    {"_BayesianMonitoring1_BenjaminiHochberg", (DL_FUNC) &_BayesianMonitoring1_BenjaminiHochberg, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_BayesianMonitoring1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
